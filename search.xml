<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>windows 下安装mongodb 机器可视化工具adminMongo</title>
    <url>/2020/06/11/windows%20%E4%B8%8B%E5%AE%89%E8%A3%85mongodb%20%E6%9C%BA%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7adminMongo/</url>
    <content><![CDATA[<h1 id="windows-下安装mongodb-机器可视化工具adminMongo"><a href="#windows-下安装mongodb-机器可视化工具adminMongo" class="headerlink" title="windows 下安装mongodb 机器可视化工具adminMongo"></a>windows 下安装mongodb 机器可视化工具adminMongo</h1><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><h3 id="至Mongodb的-官方网站下载安装包。"><a href="#至Mongodb的-官方网站下载安装包。" class="headerlink" title="至Mongodb的 官方网站下载安装包。"></a>至Mongodb的 官方网站下载安装包。</h3><blockquote>
<p>地址<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a> ，zip,msi均可。</p>
</blockquote>
<blockquote>
<p>官网下载比较慢，可以用我分享在百度网盘上的，</p>
<p>链接：<a href="https://pan.baidu.com/s/1qsCni7Z_xV5dIBY7o3UDjg" target="_blank" rel="noopener">https://pan.baidu.com/s/1qsCni7Z_xV5dIBY7o3UDjg</a>  提取码：f2l7 ，压缩包解压密码：666666</p>
<p>zip格式和msi格式都有，截止到今日（2021.6.9）是官网发布的最新版本。</p>
</blockquote>
<h3 id="Mongodb-的安装"><a href="#Mongodb-的安装" class="headerlink" title="Mongodb 的安装"></a>Mongodb 的安装</h3><blockquote>
<p>msi安装起来很简单,一直下一步就好，可以自己选择喜欢的安装路径，新手最好安装我的路径方式来，文件存放之如下目录：F:\MongoDB\mongoDB\ 。</p>
<p>zip安装也很简单，直接将解压的包放在喜欢的位置下即可，最好也是如下目录：F:\MongoDB\mongoDB\。</p>
</blockquote>
<blockquote>
<p>接下来我们要将这个文件的 bin 目录，即：F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\bin配置在我们的 Windows 环境变量的 Path 中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200614195733.png" alt="image-20200614195527784"></p>
</blockquote>
<blockquote>
<p>配置步骤:</p>
<p>我的电脑–属性–高级系统设置–高级–环境变量–找到系统变量下的Path–加入路径即可</p>
</blockquote>
<h3 id="创建数据库文件的存放位置"><a href="#创建数据库文件的存放位置" class="headerlink" title="创建数据库文件的存放位置"></a>创建数据库文件的存放位置</h3><blockquote>
<p>在MongoDB下创建data，在data下再创建db：F:\MongoDB\data\db</p>
</blockquote>
<p>因为启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615091626.png" alt="image-20200615091626563"></p>
<h3 id="启动Mongodb-服务"><a href="#启动Mongodb-服务" class="headerlink" title="启动Mongodb 服务"></a>启动Mongodb 服务</h3><blockquote>
<p>打开 cmd ，输入mongod –dbpath F:\MongoDB\data\db即可，这个–dbpath 后的位置就是我们刚刚配置数据库的位置。</p>
</blockquote>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote>
<p>在浏览器输入<a href="http://localhost:27017" target="_blank" rel="noopener">http://localhost:27017</a> （27017是mongodb的端口号）查看，若网页</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>显示以上英文则表示启动成功啦~~</p>
</blockquote>
<h3 id="配置一下本地的-windows-mongodb-服务"><a href="#配置一下本地的-windows-mongodb-服务" class="headerlink" title="配置一下本地的 windows mongodb 服务"></a>配置一下本地的 windows mongodb 服务</h3><blockquote>
<p>这样可设置为 开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。该配置会大大方便。</p>
</blockquote>
<ol>
<li><p>先在data文件下创建一个新文件夹log（用来存放日志文件）</p>
</li>
<li><p>在Mongodb bin 同等级目录下新建配置文件mongo.config,并输入以下内容：</p>
<blockquote>
<p>dbpath=F:\MongoDB\data\db<br>logpath=F:\MongoDB\data\log\mongodb.log</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092031.png" alt="image-20200614200342044"></p>
</li>
<li><p>以管理员身份打开cmd,运行以下命令：</p>
<blockquote>
<p>mongod –config F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\mongo.config –install –serviceName “MongoDB”</p>
<p>F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\mongo.config  是你的路径名。</p>
</blockquote>
</li>
<li><p>完成后查看本地服务，发现MongoDB已启动。</p>
</li>
</ol>
<p>至此Mongodb的安装及配置已圆满完成。</p>
<h1 id="安装adminMongo"><a href="#安装adminMongo" class="headerlink" title="安装adminMongo"></a>安装adminMongo</h1><h3 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a>git环境搭建</h3><blockquote>
<p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br> 安装完成后，找到安装git的目录下的git-bash.exe,打开，进行配置：</p>
<p>配置环境变量：在path环境变量中新增git安装路径下的bin文件夹路径</p>
</blockquote>
<h3 id="node-js环境搭建"><a href="#node-js环境搭建" class="headerlink" title="node.js环境搭建"></a>node.js环境搭建</h3><blockquote>
<p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p>安装完成后，打开<code>cmd</code>，输入 <code>node -v</code>，检查是否显示版本信息，如果显示即安装成功。</p>
<p>打开cmd，输入npm -v校验npm工具是否安装成功，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西.</p>
<p>npm安装成功，在安装目录下新建node_cache，并使用cmd命令指定这个变量：</p>
<blockquote>
<p>npm config set cache “D:\Develop\nodejs\node_cache”</p>
</blockquote>
</blockquote>
<h3 id="adminMongo下载安装"><a href="#adminMongo下载安装" class="headerlink" title="adminMongo下载安装"></a>adminMongo下载安装</h3><blockquote>
<ol>
<li>git下将adminMongo源码从github上clone下来：</li>
</ol>
<p>git clone <a href="https://github.com/mrvautin/adminMongo.git" target="_blank" rel="noopener">https://github.com/mrvautin/adminMongo.git</a></p>
<ol start="2">
<li>进入adminMongo路径：</li>
</ol>
<p>cd adminMongo</p>
<ol start="3">
<li>安装依赖：</li>
</ol>
<p>npm install</p>
<ol start="4">
<li>启动应用：</li>
</ol>
<p>npm start </p>
</blockquote>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>输入 <a href="http://127.0.0.1:1234" target="_blank" rel="noopener">http://127.0.0.1:1234</a> 就会弹出adminMongo 的界面啦</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092059.png" alt="image-20200614200653014"></p>
<h3 id="添加mongodb到adminMongo"><a href="#添加mongodb到adminMongo" class="headerlink" title="添加mongodb到adminMongo"></a>添加mongodb到adminMongo</h3><p> 分别填入：<br> Connection name： local<br> Connection string： <a href="mongodb://localhost:27017">mongodb://localhost:27017</a><br> 点击 <code>Add Connection</code>按钮即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092209.png" alt="image-20200614200745468"></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown 语法入门</title>
    <url>/2020/05/23/Markdown%20%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。本文是以实现日常书写个人博客所需而编写。语法超级简单，几分钟掌握Markdown语法。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号标记标题（1~6级）</p>
<blockquote>
<p># 一级标题</p>
<p>## 二级标题</p>
<p>……..</p>
<p>###### 六级标题</p>
</blockquote>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落的换行是使用两个以上的空格加上回车  </p>
<p>或者使用空行来换行</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><blockquote>
<p>*斜体文本*</p>
<p>_斜体文本_</p>
<p>**粗体文本**</p>
<p>__粗体文本__</p>
<p>***粗斜体文本***</p>
<p>___粗斜体文本___</p>
</blockquote>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>可采用下述几种方法创建分割线</p>
<blockquote>
<p>***</p>
<p>*****</p>
<p>------</p>
<p>----------------</p>
</blockquote>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><blockquote>
<p>文字两端添加双波浪线</p>
<p>示例:</p>
<p>~~ABC~~</p>
<p>效果:</p>
<p><del>ABC</del></p>
</blockquote>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><blockquote>
<p>下划线可以通过HTML的&lt;u&gt;标签来实现</p>
<p>示例:</p>
<p>&lt;u&gt;下划线文字&lt;/u&gt;</p>
<p>效果:</p>
<p><u>下划线文字</u></p>
</blockquote>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><blockquote>
<p>示例:</p>
<p>脚注是对文本的补充说明，格式为[^文字]</p>
<p>效果:</p>
<p>脚注是对文本的补充说明，格式为[^脚注文字]</p>
</blockquote>
<p>[^脚注文字]: yeah, it’s me#</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote>
<p>无序列表采用星号（*）、加号（+）、或是减号（-）作为列表标记</p>
<p>示例:</p>
<p>* 第一</p>
<p>+ 第二</p>
<p>- 第三</p>
<p>效果如下：</p>
<ul>
<li>第一</li>
</ul>
<ul>
<li>第二</li>
</ul>
<ul>
<li>第三</li>
</ul>
</blockquote>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote>
<p>有序列表使用数字加上 . 来表示</p>
<p>示例:</p>
<p>1.  第一</p>
<p>2. 第二</p>
<p>3. 第三</p>
<p>效果：</p>
<ol>
<li>第一</li>
<li>第二</li>
<li>第三</li>
</ol>
</blockquote>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><blockquote>
<p>列表的嵌套，只需在子列表中的选项添加tab键即可</p>
<p>示例：</p>
<p>1. 第一项：</p>
<p>​    第一项嵌套的</p>
<p>2. 第二项：</p>
<p>​    第二项嵌套的</p>
<p>效果：</p>
<ol>
<li>第一项：<ol>
<li>第一项嵌套的</li>
</ol>
</li>
<li>第二项：<ol>
<li>第二项嵌套的</li>
</ol>
</li>
</ol>
</blockquote>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><blockquote>
<p> 区块是段落开头的使用的 &gt; 号，后面紧跟着一个空格</p>
<p> 示例：</p>
<p> &gt; 区块的引用</p>
<p> &gt; 我是区块</p>
<p> 效果：</p>
<blockquote>
<p>区块的引用</p>
<p>我是区块</p>
</blockquote>
</blockquote>
<blockquote>
<p>区块之间也是可以嵌套的</p>
<p>示例：</p>
<p>&gt; 第一层</p>
<p>&gt; &gt; 第二层</p>
<p>&gt; &gt; &gt; 第三层</p>
<p>效果：</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<p>注：列表中放入区块需在 &gt; 前输入tab键</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>如果是一个函数或片段的代码可以使用反引号包裹起来</p>
<p>示例：</p>
<p>`printf()` </p>
<p>效果：</p>
<p><code>printf()</code></p>
</blockquote>
<blockquote>
<p>代码区块使用三个反引号包裹</p>
<p>示例:</p>
<p>```int main(){</p>
<p>​    int i = 0;    </p>
<p>​    return 0;</p>
<p>}```</p>
<p>效果:</p>
<figure class="highlight plain"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="code"><pre><span class="line">int i&#x3D;0;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>
<p>链接的使用方法</p>
</blockquote>
<p>1.[]后跟()</p>
<blockquote>
<p>示例:</p>
<p>[我的github](<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a>)</p>
<p>效果:</p>
<p><a href="https://github.com/llz-github" target="_blank" rel="noopener">我的github</a></p>
</blockquote>
<p>2.直接使用&lt;&gt;</p>
<blockquote>
<p>示例:</p>
<p>&lt;<a href="https://github.com/llz-github&gt;" target="_blank" rel="noopener">https://github.com/llz-github&gt;</a></p>
<p>效果:</p>
<p><a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
</blockquote>
<p>3.通过变量设置连接</p>
<blockquote>
<p>示例:</p>
<p>这里使用1作为网址连接我的[github][1]</p>
<p>这里使用2作为网址连接我的[github][2]</p>
<p>[1]:<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
<p>[2]:<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
<p>效果:</p>
<p>这里使用1作为网址连接我的<a href="https://github.com/llz-github" target="_blank" rel="noopener">github</a></p>
<p>这里使用2作为网址连接我的<a href="https://github.com/llz-github" target="_blank" rel="noopener">github</a></p>
</blockquote>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>图片语法格式 ![图片的替代文字](图片地址)</p>
<p>示例:</p>
<p>![](<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">https://images5.alphacoders.com/532/532559.jpg</a>)</p>
<p>效果:</p>
<p><img src="https://images5.alphacoders.com/532/532559.jpg" alt=""></p>
</blockquote>
<blockquote>
<p>我们也可以像对网址那样对待图片</p>
<p>示例:</p>
<p>这是一个[图片][3]</p>
<p>[3]:<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">https://images5.alphacoders.com/532/532559.jpg</a></p>
<p>效果:</p>
<p>这是一个<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">图片</a></p>
</blockquote>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote>
<p>示例:</p>
<p>| 姓名| 性别| 学号</p>
<p>| - | - | -</p>
<p>| lz | 男 | 01</p>
<p>| zl | 男 | 02</p>
<p>| ly | 女 | 03</p>
<p>效果 :</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>学号</th>
</tr>
</thead>
<tbody><tr>
<td>lz</td>
<td>男</td>
<td>01</td>
</tr>
<tr>
<td>zl</td>
<td>男</td>
<td>02</td>
</tr>
<tr>
<td>ly</td>
<td>女</td>
<td>03</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>接下来再给大家介绍一下快捷键的应用,</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>语法</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>标题</td>
<td>用#号表示，#一级标题，##表示二级标题，依次类推</td>
<td>Ctrl+1、2、3、4</td>
</tr>
<tr>
<td>字体加粗</td>
<td>左右用**包裹起来</td>
<td>Ctrl+B</td>
</tr>
<tr>
<td>斜体字</td>
<td>左右用*包裹起来</td>
<td>Ctrl+I</td>
</tr>
<tr>
<td>加粗斜体</td>
<td>左右用**包裹起来</td>
<td>Ctrl+B,Ctrl+I</td>
</tr>
<tr>
<td>&gt;区块</td>
<td>在文字开头添加&gt;表示区块说明</td>
<td>Ctrl+Q</td>
</tr>
<tr>
<td>代码块</td>
<td>通过或者4个空格缩进表示</td>
<td>Ctrl+K</td>
</tr>
<tr>
<td>无序列表</td>
<td>文字前加上 - 或 * 即可变为无序列表</td>
<td>Ctrl+U</td>
</tr>
<tr>
<td>有序列表</td>
<td>直接在文字前加1. 2.符号要和文字之间加上一个字符的空格表示</td>
<td>Ctrl+O</td>
</tr>
<tr>
<td>链接</td>
<td>通过<a href="www.baidu.com">百度</a>写法表示超链接</td>
<td>Ctrl+L</td>
</tr>
<tr>
<td>图片</td>
<td>在光标所在行插入图片</td>
<td>Ctrl+G</td>
</tr>
<tr>
<td>时间戳</td>
<td></td>
<td>Ctrl+T</td>
</tr>
</tbody></table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h2><blockquote>
<p>HTML中的元素例如&lt;br&gt;等都可以在文档中实现</p>
<p>示例：</p>
<p>&lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;Atl&lt;/kbd&gt; + &lt;kbd&gt;z&lt;/kbd&gt;调出QQ </p>
<p>效果：</p>
<p>ctrl + Alt + z调出QQ</p>
</blockquote>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><blockquote>
<p>当你需要输入一些特殊字符时,例如:* [] (),我们就需要用到转义字符 \ </p>
<p>在需要的符号前输入 \ ,则保持原符号.</p>
<p>示例:</p>
<p>\_我应该是斜体文本\_</p>
<p>效果:》</p>
<p>_我应该是斜体文本斜体文本_</p>
</blockquote>
<p>以上便是 Markdown 中常用到的语法，在此留下足迹以备用。</p>
]]></content>
  </entry>
  <entry>
    <title>python爬虫设置随机ip和User-Agent</title>
    <url>/2020/06/13/python%E7%88%AC%E8%99%AB%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BAip%E5%92%8CUser-Agent/</url>
    <content><![CDATA[<p>在python 数据爬取的时候，有些网站不会同意我们直接用爬虫访问爬取，如果识别是一个爬虫在访问，那么站点根本不会响应。不仅如此，当服务器觉得一个频繁的请求是来自于同一个IP地址发出的，服务器也会对IP进行限制访问。</p>
<blockquote>
<p>针对以上问题，我们也有相应的方法应对：</p>
</blockquote>
<p>1.对于服务器的爬虫识别问题，我们可以利用User-Agent标识将爬虫伪装成用户请求。</p>
<p>2.对于限制ip 的问题，我们可以使用代理ip ，随机切换IP地址，不使用真实的IP来发起请求。</p>
<blockquote>
<p>获取随机ip 和User-Agent 的文件 random_ip_and_header.py</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_xici_ip</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment"># 尝试代理agents增强反反爬</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">random_agent</span><span class="params">(self)</span>:</span></span><br><span class="line">     user_agents = [</span><br><span class="line">         <span class="string">"Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"</span>,</span><br><span class="line">         <span class="string">"MQQBrowser/25 (Linux; U; 2.3.3; zh-cn; HTC Desire S Build/GRI40;480*800)"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (Linux; U; Android 2.3.3; zh-cn; HTC_DesireS_S510e Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (SymbianOS/9.3; U; Series60/3.2 NokiaE75-1 /110.48.125 Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/413"</span></span><br><span class="line">         <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>,</span><br><span class="line">         <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,</span><br><span class="line">         <span class="string">'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11'</span></span><br><span class="line">         ]</span><br><span class="line">     <span class="keyword">return</span> random.choice(user_agents)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 尝试代理IP增强反反爬</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_ip_list</span><span class="params">(self, url, headers)</span>:</span></span><br><span class="line">     web_data = requests.get(url, headers=headers)</span><br><span class="line">     soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</span><br><span class="line">     ips = soup.find_all(<span class="string">'tr'</span>)</span><br><span class="line">     ip_list = []</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</span><br><span class="line">         ip_info = ips[i]</span><br><span class="line">         tds = ip_info.find_all(<span class="string">'td'</span>)</span><br><span class="line">         ip_list.append(tds[<span class="number">1</span>].text + <span class="string">':'</span> + tds[<span class="number">2</span>].text)</span><br><span class="line">     <span class="keyword">return</span> ip_list</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_random_ip</span><span class="params">(self, ip_list)</span>:</span></span><br><span class="line">     proxy_list = []</span><br><span class="line">     <span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">         proxy_list.append(<span class="string">'http://'</span> + ip)</span><br><span class="line">     proxy_ip = random.choice(proxy_list)</span><br><span class="line">     proxies = &#123;<span class="string">'http'</span>: proxy_ip&#125;</span><br><span class="line">     <span class="keyword">return</span> proxies</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">     url = <span class="string">'http://www.xicidaili.com/nn/%s'</span>%random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">     headers = &#123;</span><br><span class="line">         <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span></span><br><span class="line">     &#125;</span><br><span class="line">     ip_list = self.get_ip_list(url, headers=headers)</span><br><span class="line">     print(ip_list)</span><br><span class="line">     <span class="keyword">return</span> self.get_random_ip(ip_list)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(get_xici_ip().random_agent())</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(get_xici_ip().get_one())</span><br></pre></td></tr></table></figure>

<p>本文件可直接使用获取，也可供其他文件调用实现随机 ip 和 header 访问。</p>
<p>在爬虫文件中设置以下配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random_ip_and_header <span class="keyword">import</span> get_xici_ip</span><br><span class="line"></span><br><span class="line">User_Agent = get_xici_ip().random_agent()</span><br><span class="line">proxy = get_xici_ip().get_one()</span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'en'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: User_Agent</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>并为请求访问设置指定headers 和proxies 便可进行匿名访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(url,headers=header,proxies=proxy)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如此设置便可大大提高数据爬取速度，但是要记得，数据爬取会给服务器带来很大的压力，我们也要设置好爬取时间间隔，最好是在夜深人静的时候进行爬取，避免给服务器造成困扰哦。</p>
]]></content>
  </entry>
  <entry>
    <title>Java大学生特训营 疫情地图项目实战课</title>
    <url>/2020/08/17/Java%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%89%B9%E8%AE%AD%E8%90%A5%20%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><blockquote>
<p>本项目我们采用阿里云的云服务器，配合开课吧提供的疫情数据，完成疫情地图的上线，意在熟悉使用流程。</p>
<ol>
<li>大部分前端代码已经提供，只需部分修改。</li>
<li>租用的阿里云服务器总体费用不会超过0.2元，但是需要在阿里云中充值100元才能使用服务，不必担心，项目关闭24小时后即可将保证金退回，三个月内申请退回原路径都是秒到账。</li>
<li>前端代码 链接：<a href="https://pan.baidu.com/s/1TIXGaFjkC8zb6u6O7MRADA" target="_blank" rel="noopener">https://pan.baidu.com/s/1TIXGaFjkC8zb6u6O7MRADA</a> <pre><code>提取码：2yi5</code></pre></li>
</ol>
</blockquote>
<h1 id="阿里云服务器的搭建"><a href="#阿里云服务器的搭建" class="headerlink" title="阿里云服务器的搭建"></a><strong>阿里云服务器的搭建</strong></h1><blockquote>
<p>首先打开浏览器输入<a href="https://www.aliyun.com/" target="_blank" rel="noopener">https://www.aliyun.com/</a> 进入阿里云官网，本次购买的是阿里云目前云服务器使用量最高的云服务器ECS，按照下图操作即可。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215439.png" alt="image-20200817214834520"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215423.png" alt="image-20200817215423707"></p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a><strong>基础配置</strong></h2><blockquote>
<p>我们只是一个测试，流量很小，采用按量付费即可，地域一般选取离自己近的地方，这里张家口这个有优惠，作为测试，我们选取有优惠的张家口。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818171539.png" alt="image-20200818171401116"></p>
</blockquote>
<blockquote>
<p>接着我们选择2核cpu 和2G的内存，选择价格比较便宜的突发性能实例t6。</p>
<p>这里的价格主要体现在平均基准CPU计算性能，我们选择的突发性能实例t6，一天内只有六个小时的时间可以发挥100%性能，其余时间只用到20%，而且购买之后前6个小时（我们只需要使用一个小时即可完成测试）是发挥100%的性能，也就是说0.082的价格有着0.44的性能。</p>
<p>而且大部分的项目也不需要全天都高效率，比如外卖系统高峰期只有中午和晚上的几个小时，所以这种服务器很合算。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818171516.png" alt="image-20200818171515781"></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818210453.png" alt="image-20200818172932324"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818210503.png" alt="image-20200818173003728"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818173059.png" alt="image-20200818173059209"></p>
<h2 id="网络和安全组"><a href="#网络和安全组" class="headerlink" title="网络和安全组"></a><strong>网络和安全组</strong></h2><blockquote>
<p>这里我们先只配置网络，安全组比较麻烦，在后面进行配置。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817223833.png" alt="image-20200817223833690"></p>
<h2 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a><strong>系统配置</strong></h2><blockquote>
<p>这里的账户是root，密码自己设置，后面会用到。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817224339.png" alt="image-20200817224029213"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817224328.png" alt="image-20200817224328633"></p>
<h2 id="服务器的配置管理"><a href="#服务器的配置管理" class="headerlink" title="服务器的配置管理"></a><strong>服务器的配置管理</strong></h2><h3 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a><strong>安全组配置</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818110736.png" alt="image-20200818110727008"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818111015.png" alt="image-20200818110834434"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818110952.png" alt="image-20200818110952472"></p>
<blockquote>
<p>目的 中的80代表访问80端口,此端口做为疫情地图默认访问端口</p>
<p> 源 选择0.0.0.0/0代表发布的项目所有用户都可以访问</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818111151.png" alt="image-20200818111151117"></p>
<blockquote>
<p>目的 中的8888代表访问8888端口,此端口作为疫情地图管理端</p>
<p> 源 选择0.0.0.0/0代表发布的项目所有用户都可以访问</p>
</blockquote>
<p>至此安全组配置也告一段。</p>
<h3 id="远程连接并配置"><a href="#远程连接并配置" class="headerlink" title="远程连接并配置"></a><strong>远程连接并配置</strong></h3><p>接下来返回我们的控制台进行连接及配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112041.png" alt="image-20200818112040922"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112211.png" alt="image-20200818112211548"></p>
<blockquote>
<p>账号为root ,密码为系统配置时自己配置的密码。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112841.png" alt="image-20200818112259497"></p>
</blockquote>
<blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112503.png" alt="image-20200818112503293"></p>
<p>命令行中输入<code>bt default</code>初始化我们的宝塔面板，初始化完成后弹出面板网址及账号密码</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112740.png" alt="image-20200818112740490"></p>
</blockquote>
<blockquote>
<p>复制网址在网页中打开，输入账号密码，登录</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818112950.png" alt="image-20200818112950007"></p>
</blockquote>
<blockquote>
<p>登录后出现了软件安装界面，我们不安装这些，关掉即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818113158.png" alt="image-20200818113158227"></p>
</blockquote>
<blockquote>
<p>我们按照下面步骤安装  tomcat，按章完毕后第三个框中的<strong>安装</strong>会变成<strong>卸载</strong>，安装时间一般在两分钟左右</p>
<p><img src="C:%5CUsers%5Cllz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200818113559040.png" alt="image-20200818113559040"></p>
</blockquote>
<blockquote>
<p>因为tomcat 默认端口是8080 ，而我们刚刚指定的疫情地图的端口为80，所以这里需要修改一下tomcat的端口配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818114236.png" alt="image-20200818114236196"></p>
<p>保存以后还需<strong>重启</strong>服务器才能生效，一定要<strong>重启</strong>服务器</p>
<p><img src="C:%5CUsers%5Cllz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200818114426037.png" alt="image-20200818114426037"></p>
</blockquote>
<blockquote>
<p>此时在浏览器中访问我们的80 端口便可以显示出以下内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818114618.png" alt="image-20200818114617942"></p>
</blockquote>
<blockquote>
<p>接下来我们修改网页显示的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818210712.png" alt="image-20200818114855667"></p>
<p>按下图目录进行点击即可找到index.jsp文件，此文件为前端网页显示的内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818115044.png" alt="image-20200818115044743"></p>
</blockquote>
<blockquote>
<p>将以下两个前端代码导入即可在网页中查看到静态的(数据是静态的，还未导入动态数据)疫情地图</p>
<p>index.html(前端代码)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">session</span>=<span class="string">"false"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>疫情地图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    		<span class="keyword">var</span> data = &#123;<span class="string">"data"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"湖北"</span>,<span class="string">"value"</span>:<span class="number">123</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"广东"</span>,<span class="string">"value"</span>:<span class="number">1590</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"河南"</span>,<span class="string">"value"</span>:<span class="number">1276</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"浙江"</span>,<span class="string">"value"</span>:<span class="number">1268</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"香港"</span>,<span class="string">"value"</span>:<span class="number">1055</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"湖南"</span>,<span class="string">"value"</span>:<span class="number">1019</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安徽"</span>,<span class="string">"value"</span>:<span class="number">991</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黑龙江"</span>,<span class="string">"value"</span>:<span class="number">945</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"江西"</span>,<span class="string">"value"</span>:<span class="number">937</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"山东"</span>,<span class="string">"value"</span>:<span class="number">788</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"上海"</span>,<span class="string">"value"</span>:<span class="number">667</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"江苏"</span>,<span class="string">"value"</span>:<span class="number">653</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"北京"</span>,<span class="string">"value"</span>:<span class="number">593</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"重庆"</span>,<span class="string">"value"</span>:<span class="number">579</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"四川"</span>,<span class="string">"value"</span>:<span class="number">561</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"台湾"</span>,<span class="string">"value"</span>:<span class="number">440</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"福建"</span>,<span class="string">"value"</span>:<span class="number">356</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"河北"</span>,<span class="string">"value"</span>:<span class="number">328</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"陕西"</span>,<span class="string">"value"</span>:<span class="number">308</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"广西"</span>,<span class="string">"value"</span>:<span class="number">254</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"内蒙古"</span>,<span class="string">"value"</span>:<span class="number">217</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"山西"</span>,<span class="string">"value"</span>:<span class="number">198</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"天津"</span>,<span class="string">"value"</span>:<span class="number">192</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"云南"</span>,<span class="string">"value"</span>:<span class="number">185</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"海南"</span>,<span class="string">"value"</span>:<span class="number">169</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉林"</span>,<span class="string">"value"</span>:<span class="number">152</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"辽宁"</span>,<span class="string">"value"</span>:<span class="number">149</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"贵州"</span>,<span class="string">"value"</span>:<span class="number">147</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"甘肃"</span>,<span class="string">"value"</span>:<span class="number">139</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新疆"</span>,<span class="string">"value"</span>:<span class="number">76</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"宁夏"</span>,<span class="string">"value"</span>:<span class="number">75</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"澳门"</span>,<span class="string">"value"</span>:<span class="number">45</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"青海"</span>,<span class="string">"value"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"西藏"</span>,<span class="string">"value"</span>:<span class="number">1</span>&#125;],<span class="string">"today"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"湖北"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"广东"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"河南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"浙江"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"香港"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"湖南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安徽"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黑龙江"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"江西"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"山东"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"上海"</span>,<span class="string">"value"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"江苏"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"北京"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"重庆"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"四川"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"台湾"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"福建"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"河北"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"陕西"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"广西"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"内蒙古"</span>,<span class="string">"value"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"山西"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"天津"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"云南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"海南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉林"</span>,<span class="string">"value"</span>:<span class="number">4</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"辽宁"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"贵州"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"甘肃"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新疆"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"宁夏"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"澳门"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"青海"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"西藏"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;],<span class="string">"g_today"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"突尼斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞尔维亚"</span>,<span class="string">"value"</span>:<span class="number">34</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"中国"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"日本"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"泰国"</span>,<span class="string">"value"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新加坡"</span>,<span class="string">"value"</span>:<span class="number">570</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"韩国"</span>,<span class="string">"value"</span>:<span class="number">32</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"澳大利亚"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"德国"</span>,<span class="string">"value"</span>:<span class="number">440</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"美国"</span>,<span class="string">"value"</span>:<span class="number">21243</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马来西亚"</span>,<span class="string">"value"</span>:<span class="number">37</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"越南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣巴泰勒米"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"肯尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伊朗"</span>,<span class="string">"value"</span>:<span class="number">2111</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"以色列"</span>,<span class="string">"value"</span>:<span class="number">16</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛利亚尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黎巴嫩"</span>,<span class="string">"value"</span>:<span class="number">26</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"克罗地亚"</span>,<span class="string">"value"</span>:<span class="number">4</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"奥地利"</span>,<span class="string">"value"</span>:<span class="number">52</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瑞士"</span>,<span class="string">"value"</span>:<span class="number">21</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"希腊"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛里求斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"爱沙尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"北马其顿"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"白俄罗斯"</span>,<span class="string">"value"</span>:<span class="number">936</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"立陶宛"</span>,<span class="string">"value"</span>:<span class="number">15</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿塞拜疆"</span>,<span class="string">"value"</span>:<span class="number">131</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"美属维尔京群岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"蒙古"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌克兰"</span>,<span class="string">"value"</span>:<span class="number">354</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波兰"</span>,<span class="string">"value"</span>:<span class="number">383</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波斯尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波黑"</span>,<span class="string">"value"</span>:<span class="number">31</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"蒙特塞拉特"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"南非"</span>,<span class="string">"value"</span>:<span class="number">767</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"布隆迪"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"南苏丹"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马耳他"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩尔多瓦"</span>,<span class="string">"value"</span>:<span class="number">280</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"保加利亚"</span>,<span class="string">"value"</span>:<span class="number">33</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"孟加拉国"</span>,<span class="string">"value"</span>:<span class="number">1251</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿尔巴尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴勒斯坦"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科摩罗"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿富汗"</span>,<span class="string">"value"</span>:<span class="number">581</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"沙特阿拉伯"</span>,<span class="string">"value"</span>:<span class="number">2509</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新西兰"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塔吉克斯坦"</span>,<span class="string">"value"</span>:<span class="number">207</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"泽西岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"叙利亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴拿马"</span>,<span class="string">"value"</span>:<span class="number">141</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"古巴"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼日利亚"</span>,<span class="string">"value"</span>:<span class="number">226</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩洛哥"</span>,<span class="string">"value"</span>:<span class="number">71</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞内加尔"</span>,<span class="string">"value"</span>:<span class="number">73</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"老挝"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴哈马"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马约特岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯洛文尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卢森堡"</span>,<span class="string">"value"</span>:<span class="number">13</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"爱尔兰"</span>,<span class="string">"value"</span>:<span class="number">51</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"厄瓜多尔"</span>,<span class="string">"value"</span>:<span class="number">569</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"捷克"</span>,<span class="string">"value"</span>:<span class="number">36</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"匈牙利"</span>,<span class="string">"value"</span>:<span class="number">42</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属圭亚那"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多哥共和国"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哥斯达黎加"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"文莱"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法罗群岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马提尼克岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"荷兰"</span>,<span class="string">"value"</span>:<span class="number">108</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴西"</span>,<span class="string">"value"</span>:<span class="number">17665</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"洪都拉斯"</span>,<span class="string">"value"</span>:<span class="number">157</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌拉圭"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"秘鲁"</span>,<span class="string">"value"</span>:<span class="number">4550</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"智利"</span>,<span class="string">"value"</span>:<span class="number">3520</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格陵兰"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣巴托洛谬岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马尔代夫"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"委内瑞拉"</span>,<span class="string">"value"</span>:<span class="number">208</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛里塔尼亚"</span>,<span class="string">"value"</span>:<span class="number">50</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"纳米比亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属留尼汪岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波多黎各"</span>,<span class="string">"value"</span>:<span class="number">159</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加纳"</span>,<span class="string">"value"</span>:<span class="number">361</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"赤道几内亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"几内亚"</span>,<span class="string">"value"</span>:<span class="number">67</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卢旺达"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格林纳达"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯威士兰"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"坦桑尼亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"贝宁"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"刚果（金）"</span>,<span class="string">"value"</span>:<span class="number">102</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"中非共和国"</span>,<span class="string">"value"</span>:<span class="number">45</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"利比里亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"索马里"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞拉利昂"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乍得"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"赞比亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴巴多斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马里"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿根廷"</span>,<span class="string">"value"</span>:<span class="number">741</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属波利尼西亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴林"</span>,<span class="string">"value"</span>:<span class="number">376</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"莫桑比克"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"喀麦隆"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌干达"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"厄立特里亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"刚果（布）"</span>,<span class="string">"value"</span>:<span class="number">8</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"津巴布韦"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"丹麦"</span>,<span class="string">"value"</span>:<span class="number">76</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿鲁巴"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斐济"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伯利兹"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"缅甸"</span>,<span class="string">"value"</span>:<span class="number">2</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞浦路斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"关岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科索沃"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉尔吉斯斯坦"</span>,<span class="string">"value"</span>:<span class="number">27</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"博茨瓦纳"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼日尔"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"苏里南"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"佛得角"</span>,<span class="string">"value"</span>:<span class="number">7</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"萨尔瓦多"</span>,<span class="string">"value"</span>:<span class="number">73</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圭亚那"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼加拉瓜"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"冈比亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"东帝汶"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴基斯坦"</span>,<span class="string">"value"</span>:<span class="number">837</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"埃及"</span>,<span class="string">"value"</span>:<span class="number">720</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科威特"</span>,<span class="string">"value"</span>:<span class="number">1073</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯洛伐克"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"直布罗陀"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩纳哥"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴拉圭"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"荷属安的列斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多米尼克"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌兹别克斯坦"</span>,<span class="string">"value"</span>:<span class="number">78</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黑山"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"危地马拉"</span>,<span class="string">"value"</span>:<span class="number">132</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加蓬"</span>,<span class="string">"value"</span>:<span class="number">70</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"苏丹"</span>,<span class="string">"value"</span>:<span class="number">137</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"利比亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣马丁岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"土耳其"</span>,<span class="string">"value"</span>:<span class="number">1022</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴布亚新几内亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多米尼加共和国"</span>,<span class="string">"value"</span>:<span class="number">909</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"约旦"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"亚美尼亚"</span>,<span class="string">"value"</span>:<span class="number">230</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣基茨和尼维斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瓜德罗普"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安提瓜和巴布达"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"玻利维亚"</span>,<span class="string">"value"</span>:<span class="number">218</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哥伦比亚"</span>,<span class="string">"value"</span>:<span class="number">640</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣文森特和格林纳丁斯"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣卢西亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法国"</span>,<span class="string">"value"</span>:<span class="number">882</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿联酋"</span>,<span class="string">"value"</span>:<span class="number">873</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加拿大"</span>,<span class="string">"value"</span>:<span class="number">1040</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"印度"</span>,<span class="string">"value"</span>:<span class="number">141</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"英国"</span>,<span class="string">"value"</span>:<span class="number">2412</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"意大利"</span>,<span class="string">"value"</span>:<span class="number">813</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"俄罗斯"</span>,<span class="string">"value"</span>:<span class="number">8764</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"菲律宾"</span>,<span class="string">"value"</span>:<span class="number">279</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"芬兰"</span>,<span class="string">"value"</span>:<span class="number">19</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼泊尔"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"葡萄牙"</span>,<span class="string">"value"</span>:<span class="number">223</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"也门"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞舌尔"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"西班牙"</span>,<span class="string">"value"</span>:<span class="number">615</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯里兰卡"</span>,<span class="string">"value"</span>:<span class="number">35</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿尔及利亚"</span>,<span class="string">"value"</span>:<span class="number">176</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"柬埔寨"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"海地"</span>,<span class="string">"value"</span>:<span class="number">63</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瑞典"</span>,<span class="string">"value"</span>:<span class="number">422</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"特里尼达和多巴哥"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉布提"</span>,<span class="string">"value"</span>:<span class="number">100</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣多美与普林西比"</span>,<span class="string">"value"</span>:<span class="number">5</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"布基纳法索"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"比利时"</span>,<span class="string">"value"</span>:<span class="number">232</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伊拉克"</span>,<span class="string">"value"</span>:<span class="number">57</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马拉维"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"冰岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"几内亚比绍"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"拉脱维亚"</span>,<span class="string">"value"</span>:<span class="number">4</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"不丹"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"挪威"</span>,<span class="string">"value"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"印度尼西亚"</span>,<span class="string">"value"</span>:<span class="number">486</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安哥拉"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"开曼群岛"</span>,<span class="string">"value"</span>:<span class="number">17</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"埃塞俄比亚"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"梵蒂冈"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科特迪瓦"</span>,<span class="string">"value"</span>:<span class="number">44</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卡塔尔"</span>,<span class="string">"value"</span>:<span class="number">1637</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"莱索托"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格鲁吉亚"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"墨西哥"</span>,<span class="string">"value"</span>:<span class="number">2713</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣马力诺"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哈萨克斯坦"</span>,<span class="string">"value"</span>:<span class="number">218</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安道尔"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"牙买加"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格恩西岛"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"罗马尼亚"</span>,<span class="string">"value"</span>:<span class="number">155</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿曼"</span>,<span class="string">"value"</span>:<span class="number">292</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"列支敦士登"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马达加斯加"</span>,<span class="string">"value"</span>:<span class="number">0</span>&#125;],<span class="string">"g_data"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"突尼斯"</span>,<span class="string">"value"</span>:<span class="number">1044</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞尔维亚"</span>,<span class="string">"value"</span>:<span class="number">10733</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"中国"</span>,<span class="string">"value"</span>:<span class="number">84506</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"日本"</span>,<span class="string">"value"</span>:<span class="number">17106</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"泰国"</span>,<span class="string">"value"</span>:<span class="number">3034</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新加坡"</span>,<span class="string">"value"</span>:<span class="number">29364</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"韩国"</span>,<span class="string">"value"</span>:<span class="number">11110</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"澳大利亚"</span>,<span class="string">"value"</span>:<span class="number">7079</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"德国"</span>,<span class="string">"value"</span>:<span class="number">177827</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"美国"</span>,<span class="string">"value"</span>:<span class="number">1570075</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马来西亚"</span>,<span class="string">"value"</span>:<span class="number">6978</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"越南"</span>,<span class="string">"value"</span>:<span class="number">324</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣巴泰勒米"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"肯尼亚"</span>,<span class="string">"value"</span>:<span class="number">963</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伊朗"</span>,<span class="string">"value"</span>:<span class="number">124603</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"以色列"</span>,<span class="string">"value"</span>:<span class="number">16659</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛利亚尼亚"</span>,<span class="string">"value"</span>:<span class="number">16</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黎巴嫩"</span>,<span class="string">"value"</span>:<span class="number">954</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"克罗地亚"</span>,<span class="string">"value"</span>:<span class="number">2232</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"奥地利"</span>,<span class="string">"value"</span>:<span class="number">16321</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瑞士"</span>,<span class="string">"value"</span>:<span class="number">30618</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"希腊"</span>,<span class="string">"value"</span>:<span class="number">2840</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛里求斯"</span>,<span class="string">"value"</span>:<span class="number">332</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"爱沙尼亚"</span>,<span class="string">"value"</span>:<span class="number">1791</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"北马其顿"</span>,<span class="string">"value"</span>:<span class="number">1839</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"白俄罗斯"</span>,<span class="string">"value"</span>:<span class="number">31508</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"立陶宛"</span>,<span class="string">"value"</span>:<span class="number">1562</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿塞拜疆"</span>,<span class="string">"value"</span>:<span class="number">3518</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"美属维尔京群岛"</span>,<span class="string">"value"</span>:<span class="number">69</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"蒙古"</span>,<span class="string">"value"</span>:<span class="number">140</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌克兰"</span>,<span class="string">"value"</span>:<span class="number">19230</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波兰"</span>,<span class="string">"value"</span>:<span class="number">19268</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波斯尼亚"</span>,<span class="string">"value"</span>:<span class="number">1421</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波黑"</span>,<span class="string">"value"</span>:<span class="number">2321</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"蒙特塞拉特"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"南非"</span>,<span class="string">"value"</span>:<span class="number">17200</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"布隆迪"</span>,<span class="string">"value"</span>:<span class="number">42</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"南苏丹"</span>,<span class="string">"value"</span>:<span class="number">347</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马耳他"</span>,<span class="string">"value"</span>:<span class="number">569</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩尔多瓦"</span>,<span class="string">"value"</span>:<span class="number">6340</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"保加利亚"</span>,<span class="string">"value"</span>:<span class="number">2292</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"孟加拉国"</span>,<span class="string">"value"</span>:<span class="number">25121</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿尔巴尼亚"</span>,<span class="string">"value"</span>:<span class="number">949</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴勒斯坦"</span>,<span class="string">"value"</span>:<span class="number">391</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科摩罗"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿富汗"</span>,<span class="string">"value"</span>:<span class="number">7653</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"沙特阿拉伯"</span>,<span class="string">"value"</span>:<span class="number">59854</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"新西兰"</span>,<span class="string">"value"</span>:<span class="number">1503</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塔吉克斯坦"</span>,<span class="string">"value"</span>:<span class="number">1936</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"泽西岛"</span>,<span class="string">"value"</span>:<span class="number">293</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"叙利亚"</span>,<span class="string">"value"</span>:<span class="number">58</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴拿马"</span>,<span class="string">"value"</span>:<span class="number">9867</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"古巴"</span>,<span class="string">"value"</span>:<span class="number">1887</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼日利亚"</span>,<span class="string">"value"</span>:<span class="number">6401</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩洛哥"</span>,<span class="string">"value"</span>:<span class="number">7023</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞内加尔"</span>,<span class="string">"value"</span>:<span class="number">2617</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"老挝"</span>,<span class="string">"value"</span>:<span class="number">19</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴哈马"</span>,<span class="string">"value"</span>:<span class="number">96</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马约特岛"</span>,<span class="string">"value"</span>:<span class="number">1370</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯洛文尼亚"</span>,<span class="string">"value"</span>:<span class="number">1467</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卢森堡"</span>,<span class="string">"value"</span>:<span class="number">3958</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"爱尔兰"</span>,<span class="string">"value"</span>:<span class="number">24251</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"厄瓜多尔"</span>,<span class="string">"value"</span>:<span class="number">34151</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"捷克"</span>,<span class="string">"value"</span>:<span class="number">8683</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"匈牙利"</span>,<span class="string">"value"</span>:<span class="number">3598</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属圭亚那"</span>,<span class="string">"value"</span>:<span class="number">218</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多哥共和国"</span>,<span class="string">"value"</span>:<span class="number">338</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哥斯达黎加"</span>,<span class="string">"value"</span>:<span class="number">882</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"文莱"</span>,<span class="string">"value"</span>:<span class="number">141</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法罗群岛"</span>,<span class="string">"value"</span>:<span class="number">187</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马提尼克岛"</span>,<span class="string">"value"</span>:<span class="number">192</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"荷兰"</span>,<span class="string">"value"</span>:<span class="number">44249</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴西"</span>,<span class="string">"value"</span>:<span class="number">271885</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"洪都拉斯"</span>,<span class="string">"value"</span>:<span class="number">2955</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌拉圭"</span>,<span class="string">"value"</span>:<span class="number">738</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"秘鲁"</span>,<span class="string">"value"</span>:<span class="number">99483</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"智利"</span>,<span class="string">"value"</span>:<span class="number">49579</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格陵兰"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣巴托洛谬岛"</span>,<span class="string">"value"</span>:<span class="number">6</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马尔代夫"</span>,<span class="string">"value"</span>:<span class="number">1143</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"委内瑞拉"</span>,<span class="string">"value"</span>:<span class="number">749</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"毛里塔尼亚"</span>,<span class="string">"value"</span>:<span class="number">131</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"纳米比亚"</span>,<span class="string">"value"</span>:<span class="number">16</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属留尼汪岛"</span>,<span class="string">"value"</span>:<span class="number">446</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"波多黎各"</span>,<span class="string">"value"</span>:<span class="number">2805</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加纳"</span>,<span class="string">"value"</span>:<span class="number">6096</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"赤道几内亚"</span>,<span class="string">"value"</span>:<span class="number">825</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"几内亚"</span>,<span class="string">"value"</span>:<span class="number">2863</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卢旺达"</span>,<span class="string">"value"</span>:<span class="number">308</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格林纳达"</span>,<span class="string">"value"</span>:<span class="number">22</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯威士兰"</span>,<span class="string">"value"</span>:<span class="number">208</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"坦桑尼亚"</span>,<span class="string">"value"</span>:<span class="number">509</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"贝宁"</span>,<span class="string">"value"</span>:<span class="number">339</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"刚果（金）"</span>,<span class="string">"value"</span>:<span class="number">1731</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"中非共和国"</span>,<span class="string">"value"</span>:<span class="number">411</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"利比里亚"</span>,<span class="string">"value"</span>:<span class="number">233</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"索马里"</span>,<span class="string">"value"</span>:<span class="number">1502</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞拉利昂"</span>,<span class="string">"value"</span>:<span class="number">534</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乍得"</span>,<span class="string">"value"</span>:<span class="number">545</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"赞比亚"</span>,<span class="string">"value"</span>:<span class="number">772</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴巴多斯"</span>,<span class="string">"value"</span>:<span class="number">90</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马里"</span>,<span class="string">"value"</span>:<span class="number">901</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿根廷"</span>,<span class="string">"value"</span>:<span class="number">8809</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法属波利尼西亚"</span>,<span class="string">"value"</span>:<span class="number">60</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴林"</span>,<span class="string">"value"</span>:<span class="number">7532</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"莫桑比克"</span>,<span class="string">"value"</span>:<span class="number">146</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"喀麦隆"</span>,<span class="string">"value"</span>:<span class="number">3529</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌干达"</span>,<span class="string">"value"</span>:<span class="number">260</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"厄立特里亚"</span>,<span class="string">"value"</span>:<span class="number">39</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"刚果（布）"</span>,<span class="string">"value"</span>:<span class="number">420</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"津巴布韦"</span>,<span class="string">"value"</span>:<span class="number">46</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"丹麦"</span>,<span class="string">"value"</span>:<span class="number">11044</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿鲁巴"</span>,<span class="string">"value"</span>:<span class="number">101</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斐济"</span>,<span class="string">"value"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伯利兹"</span>,<span class="string">"value"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"缅甸"</span>,<span class="string">"value"</span>:<span class="number">193</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞浦路斯"</span>,<span class="string">"value"</span>:<span class="number">1009</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"关岛"</span>,<span class="string">"value"</span>:<span class="number">154</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科索沃"</span>,<span class="string">"value"</span>:<span class="number">813</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉尔吉斯斯坦"</span>,<span class="string">"value"</span>:<span class="number">1270</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"博茨瓦纳"</span>,<span class="string">"value"</span>:<span class="number">25</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼日尔"</span>,<span class="string">"value"</span>:<span class="number">914</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"苏里南"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"佛得角"</span>,<span class="string">"value"</span>:<span class="number">335</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"萨尔瓦多"</span>,<span class="string">"value"</span>:<span class="number">1571</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圭亚那"</span>,<span class="string">"value"</span>:<span class="number">125</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼加拉瓜"</span>,<span class="string">"value"</span>:<span class="number">254</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"冈比亚"</span>,<span class="string">"value"</span>:<span class="number">24</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"东帝汶"</span>,<span class="string">"value"</span>:<span class="number">24</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴基斯坦"</span>,<span class="string">"value"</span>:<span class="number">45898</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"埃及"</span>,<span class="string">"value"</span>:<span class="number">13484</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科威特"</span>,<span class="string">"value"</span>:<span class="number">16764</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯洛伐克"</span>,<span class="string">"value"</span>:<span class="number">1495</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"直布罗陀"</span>,<span class="string">"value"</span>:<span class="number">147</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"摩纳哥"</span>,<span class="string">"value"</span>:<span class="number">97</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴拉圭"</span>,<span class="string">"value"</span>:<span class="number">829</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"荷属安的列斯"</span>,<span class="string">"value"</span>:<span class="number">16</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多米尼克"</span>,<span class="string">"value"</span>:<span class="number">16</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"乌兹别克斯坦"</span>,<span class="string">"value"</span>:<span class="number">2880</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"黑山"</span>,<span class="string">"value"</span>:<span class="number">324</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"危地马拉"</span>,<span class="string">"value"</span>:<span class="number">2133</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加蓬"</span>,<span class="string">"value"</span>:<span class="number">1502</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"苏丹"</span>,<span class="string">"value"</span>:<span class="number">2728</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"利比亚"</span>,<span class="string">"value"</span>:<span class="number">68</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣马丁岛"</span>,<span class="string">"value"</span>:<span class="number">77</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"土耳其"</span>,<span class="string">"value"</span>:<span class="number">151615</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"巴布亚新几内亚"</span>,<span class="string">"value"</span>:<span class="number">8</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"多米尼加共和国"</span>,<span class="string">"value"</span>:<span class="number">13223</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"约旦"</span>,<span class="string">"value"</span>:<span class="number">649</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"亚美尼亚"</span>,<span class="string">"value"</span>:<span class="number">5271</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣基茨和尼维斯"</span>,<span class="string">"value"</span>:<span class="number">15</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瓜德罗普"</span>,<span class="string">"value"</span>:<span class="number">155</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安提瓜和巴布达"</span>,<span class="string">"value"</span>:<span class="number">25</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"玻利维亚"</span>,<span class="string">"value"</span>:<span class="number">4481</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哥伦比亚"</span>,<span class="string">"value"</span>:<span class="number">16935</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣文森特和格林纳丁斯"</span>,<span class="string">"value"</span>:<span class="number">17</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣卢西亚"</span>,<span class="string">"value"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"法国"</span>,<span class="string">"value"</span>:<span class="number">180809</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿联酋"</span>,<span class="string">"value"</span>:<span class="number">25063</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"加拿大"</span>,<span class="string">"value"</span>:<span class="number">79112</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"印度"</span>,<span class="string">"value"</span>:<span class="number">106886</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"英国"</span>,<span class="string">"value"</span>:<span class="number">248818</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"意大利"</span>,<span class="string">"value"</span>:<span class="number">226699</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"俄罗斯"</span>,<span class="string">"value"</span>:<span class="number">308705</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"菲律宾"</span>,<span class="string">"value"</span>:<span class="number">13221</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"芬兰"</span>,<span class="string">"value"</span>:<span class="number">6399</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"尼泊尔"</span>,<span class="string">"value"</span>:<span class="number">402</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"葡萄牙"</span>,<span class="string">"value"</span>:<span class="number">29432</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"也门"</span>,<span class="string">"value"</span>:<span class="number">167</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"塞舌尔"</span>,<span class="string">"value"</span>:<span class="number">11</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"西班牙"</span>,<span class="string">"value"</span>:<span class="number">278803</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"斯里兰卡"</span>,<span class="string">"value"</span>:<span class="number">1027</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿尔及利亚"</span>,<span class="string">"value"</span>:<span class="number">7377</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"柬埔寨"</span>,<span class="string">"value"</span>:<span class="number">122</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"海地"</span>,<span class="string">"value"</span>:<span class="number">596</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"瑞典"</span>,<span class="string">"value"</span>:<span class="number">30799</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"特里尼达和多巴哥"</span>,<span class="string">"value"</span>:<span class="number">116</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"吉布提"</span>,<span class="string">"value"</span>:<span class="number">1618</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣多美与普林西比"</span>,<span class="string">"value"</span>:<span class="number">251</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"布基纳法索"</span>,<span class="string">"value"</span>:<span class="number">796</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"比利时"</span>,<span class="string">"value"</span>:<span class="number">55791</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"伊拉克"</span>,<span class="string">"value"</span>:<span class="number">3611</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马拉维"</span>,<span class="string">"value"</span>:<span class="number">70</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"冰岛"</span>,<span class="string">"value"</span>:<span class="number">1802</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"几内亚比绍"</span>,<span class="string">"value"</span>:<span class="number">1038</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"拉脱维亚"</span>,<span class="string">"value"</span>:<span class="number">1016</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"不丹"</span>,<span class="string">"value"</span>:<span class="number">21</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"挪威"</span>,<span class="string">"value"</span>:<span class="number">8267</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"印度尼西亚"</span>,<span class="string">"value"</span>:<span class="number">18496</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安哥拉"</span>,<span class="string">"value"</span>:<span class="number">52</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"开曼群岛"</span>,<span class="string">"value"</span>:<span class="number">111</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"埃塞俄比亚"</span>,<span class="string">"value"</span>:<span class="number">365</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"梵蒂冈"</span>,<span class="string">"value"</span>:<span class="number">12</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"科特迪瓦"</span>,<span class="string">"value"</span>:<span class="number">2153</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"卡塔尔"</span>,<span class="string">"value"</span>:<span class="number">35606</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"莱索托"</span>,<span class="string">"value"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格鲁吉亚"</span>,<span class="string">"value"</span>:<span class="number">713</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"墨西哥"</span>,<span class="string">"value"</span>:<span class="number">54346</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"圣马力诺"</span>,<span class="string">"value"</span>:<span class="number">655</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"哈萨克斯坦"</span>,<span class="string">"value"</span>:<span class="number">6969</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"安道尔"</span>,<span class="string">"value"</span>:<span class="number">761</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"牙买加"</span>,<span class="string">"value"</span>:<span class="number">520</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"格恩西岛"</span>,<span class="string">"value"</span>:<span class="number">252</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"罗马尼亚"</span>,<span class="string">"value"</span>:<span class="number">17191</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"阿曼"</span>,<span class="string">"value"</span>:<span class="number">5671</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"列支敦士登"</span>,<span class="string">"value"</span>:<span class="number">82</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"马达加斯加"</span>,<span class="string">"value"</span>:<span class="number">326</span>&#125;]&#125;;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/echarts/4.7.0/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.zaixianke.com/china.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.zaixianke.com/world.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 100%;height:600px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color:#333"</span> <span class="attr">class</span>=<span class="string">"control"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">href</span>=<span class="string">"javascript:updateMap(0)"</span>&gt;</span>国内累计<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color:#333"</span> <span class="attr">class</span>=<span class="string">"control"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">href</span>=<span class="string">"javascript:updateMap(1)"</span>&gt;</span>国内新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color:#333"</span> <span class="attr">class</span>=<span class="string">"control"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">href</span>=<span class="string">"javascript:updateMap(2)"</span>&gt;</span>全球累计<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">"color:#333"</span> <span class="attr">class</span>=<span class="string">"control"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">href</span>=<span class="string">"javascript:updateMap(3)"</span>&gt;</span>全球新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"control.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>control.js(视觉映射)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateMap</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">			$(<span class="string">".control"</span>).show();</span><br><span class="line">			$(<span class="string">".control:eq("</span>+num+<span class="string">")"</span>).hide();</span><br><span class="line">			myChart.clear();</span><br><span class="line">			<span class="keyword">var</span> opt = <span class="literal">null</span>;</span><br><span class="line">			<span class="keyword">switch</span>(num)&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0</span>:&#123;</span><br><span class="line">					opt = &#123;</span><br><span class="line">					        <span class="comment">// 设置标题和副标题及副标题跳转链接</span></span><br><span class="line">					        title: &#123;</span><br><span class="line">					            text: <span class="string">'新冠疫情-国内累计数据-zl版'</span>,</span><br><span class="line">					            subtext: <span class="string">'数据来源--开课吧'</span></span><br><span class="line">					        &#125;,</span><br><span class="line">					        <span class="comment">// 数据提示框</span></span><br><span class="line">					        tooltip: &#123;</span><br><span class="line">					            trigger: <span class="string">'item'</span>, <span class="comment">// item放到数据区域触发</span></span><br><span class="line">					            formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params, ticket, callback</span>) </span>&#123;</span><br><span class="line">					                <span class="keyword">if</span>(params.data)</span><br><span class="line">					                    <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt;'</span>+params.data.value+<span class="string">' (人)'</span>;</span><br><span class="line">					                <span class="keyword">else</span></span><br><span class="line">					                    <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt;无疫情信息'</span>;</span><br><span class="line">					            &#125;</span><br><span class="line">					        &#125;,</span><br><span class="line">					        <span class="comment">// 视觉映射方案:</span></span><br><span class="line">					        <span class="comment">// visualMap默认是连续映射，我们也可以设置为分段型，对于分布范围广的数据</span></span><br><span class="line">					        <span class="comment">// 使用透明度来区分疫情严重情况</span></span><br><span class="line">					        visualMap: &#123;</span><br><span class="line">					            type: <span class="string">'piecewise'</span>,</span><br><span class="line">					            pieces: [</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">2000</span>, <span class="attr">color</span>: <span class="string">'darkred'</span>&#125;,                        <span class="comment">// (1500, Infinity]</span></span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">1300</span>, <span class="attr">lte</span>: <span class="number">2000</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">1</span>&#125;,  <span class="comment">// (1000, 1500]</span></span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">800</span>, <span class="attr">lte</span>: <span class="number">1300</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.8</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">500</span>, <span class="attr">lte</span>: <span class="number">800</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">200</span>, <span class="attr">lte</span>: <span class="number">500</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.4</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">50</span>, <span class="attr">lte</span>: <span class="number">200</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.3</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">lt</span>: <span class="number">50</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.2</span>&#125;          <span class="comment">// (-Infinity, 100)</span></span><br><span class="line">					            ],</span><br><span class="line">					        &#125;,</span><br><span class="line">					</span><br><span class="line">					        <span class="comment">// 具体数据</span></span><br><span class="line">					        series: [</span><br><span class="line">					            &#123;</span><br><span class="line">					                name: <span class="string">'国内各省确诊病例'</span>, <span class="comment">// 系列名称</span></span><br><span class="line">					                zoom:<span class="number">1.2</span>,<span class="comment">//地图大小</span></span><br><span class="line">					                type: <span class="string">'map'</span>, <span class="comment">// 系列类型，地图</span></span><br><span class="line">					                map: <span class="string">'china'</span>, <span class="comment">// 要使用的地图，即上面注册的地图名称</span></span><br><span class="line">					                roam: <span class="literal">true</span>, <span class="comment">// 开启鼠标缩放和平移漫游</span></span><br><span class="line">					                label: &#123; <span class="comment">// 图形上的文本标签，地图默认显示数据名</span></span><br><span class="line">					                    show: <span class="literal">true</span>,</span><br><span class="line">					                    formatter: <span class="string">'&#123;b&#125;'</span>, <span class="comment">// b是数据名，c是数据值</span></span><br><span class="line">					                    fontSize: <span class="number">8</span></span><br><span class="line">					                &#125;,</span><br><span class="line">					                data: data.data,</span><br><span class="line">					            &#125;</span><br><span class="line">					        ]</span><br><span class="line">					    &#125;;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">					opt = &#123;</span><br><span class="line">					        <span class="comment">// 设置标题和副标题及副标题跳转链接</span></span><br><span class="line">					        title: &#123;</span><br><span class="line">					            text: <span class="string">'新冠疫情-国内新增数据'</span>,</span><br><span class="line">					            subtext: <span class="string">'数据来源--开课吧'</span>,</span><br><span class="line">					            sublink: <span class="string">'https://www.kaikeba.com'</span></span><br><span class="line">					        &#125;,</span><br><span class="line">					        <span class="comment">// 数据提示框</span></span><br><span class="line">					        tooltip: &#123;</span><br><span class="line">					            trigger: <span class="string">'item'</span>, <span class="comment">// item放到数据区域触发</span></span><br><span class="line">					            formatter:  <span class="function"><span class="keyword">function</span> (<span class="params">params, ticket, callback</span>) </span>&#123;</span><br><span class="line">					                <span class="keyword">if</span>(params.data)</span><br><span class="line">					                    <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt;'</span>+params.data.value+<span class="string">' (人)'</span>;</span><br><span class="line">					                <span class="keyword">else</span></span><br><span class="line">					                    <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt;无疫情信息'</span>;</span><br><span class="line">					            &#125;</span><br><span class="line">					        &#125;,</span><br><span class="line">					</span><br><span class="line">							<span class="comment">// 视觉映射方案:</span></span><br><span class="line">					        <span class="comment">// visualMap默认是连续映射，我们也可以设置为分段型，对于分布范围广的数据</span></span><br><span class="line">					        <span class="comment">// 使用透明度来区分疫情严重情况</span></span><br><span class="line">					        visualMap: &#123;</span><br><span class="line">					            type: <span class="string">'piecewise'</span>,</span><br><span class="line">					            pieces: [</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">50</span>, <span class="attr">color</span>: <span class="string">'darkred'</span>&#125;,                        <span class="comment">// (1500, Infinity]</span></span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">30</span>, <span class="attr">lte</span>: <span class="number">50</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">1</span>&#125;,  <span class="comment">// (1000, 1500]</span></span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">20</span>, <span class="attr">lte</span>: <span class="number">30</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.8</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">10</span>, <span class="attr">lte</span>: <span class="number">20</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">5</span>, <span class="attr">lte</span>: <span class="number">10</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.4</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">gt</span>: <span class="number">1</span>, <span class="attr">lte</span>: <span class="number">5</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.3</span>&#125;,</span><br><span class="line">					                &#123;<span class="attr">lt</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">colorAlpha</span>: <span class="number">0.0</span>&#125;          <span class="comment">// (-Infinity, 100)</span></span><br><span class="line">					            ],</span><br><span class="line">					        &#125;,</span><br><span class="line">					</span><br><span class="line">					        <span class="comment">// 具体数据</span></span><br><span class="line">					        series: [</span><br><span class="line">					            &#123;</span><br><span class="line">					                name: <span class="string">'国内各省确诊病例'</span>, <span class="comment">// 系列名称</span></span><br><span class="line">					                zoom:<span class="number">1.2</span>,<span class="comment">//地图大小</span></span><br><span class="line">					                type: <span class="string">'map'</span>, <span class="comment">// 系列类型，地图</span></span><br><span class="line">					                map: <span class="string">'china'</span>, <span class="comment">// 要使用的地图，即上面注册的地图名称</span></span><br><span class="line">					                roam: <span class="literal">true</span>, <span class="comment">// 开启鼠标缩放和平移漫游</span></span><br><span class="line">					                label: &#123; <span class="comment">// 图形上的文本标签，地图默认显示数据名</span></span><br><span class="line">					                    show: <span class="literal">true</span>,</span><br><span class="line">					                    formatter: <span class="string">'&#123;b&#125;'</span>, <span class="comment">// b是数据名，c是数据值</span></span><br><span class="line">					                    fontSize: <span class="number">8</span></span><br><span class="line">					                &#125;,</span><br><span class="line">					                data: data.today,</span><br><span class="line">					            &#125;</span><br><span class="line">					        ]</span><br><span class="line">					    &#125;;	</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">					opt = &#123;</span><br><span class="line">					    <span class="comment">// 设置标题和副标题及副标题跳转链接</span></span><br><span class="line">					    title: &#123;</span><br><span class="line">					      text: <span class="string">'新冠疫情-全球累计数据'</span>,</span><br><span class="line">					      subtext: <span class="string">'数据来源--开课吧'</span>,</span><br><span class="line">					      sublink: <span class="string">'https://www.kaikeba.com'</span></span><br><span class="line">					    &#125;,</span><br><span class="line">					    <span class="comment">// 数据提示框</span></span><br><span class="line">					    tooltip: &#123;</span><br><span class="line">					      trigger: <span class="string">'item'</span>, <span class="comment">// item放到数据区域触发</span></span><br><span class="line">					      <span class="comment">//formatter: '&#123;b&#125;&lt;br/&gt;&#123;c&#125; (人)' // 提示数据格式br表示换行，地图 : &#123;a&#125;（系列名称），&#123;b&#125;（区域名称），&#123;c&#125;（合并数值）, &#123;d&#125;（无）</span></span><br><span class="line">					      formatter:<span class="function"><span class="keyword">function</span> (<span class="params">params, ticket, callback</span>) </span>&#123;</span><br><span class="line">					        <span class="keyword">if</span>(params.data)</span><br><span class="line">					          <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt;'</span>+params.data.value+<span class="string">' (人)'</span>;</span><br><span class="line">					        <span class="keyword">else</span></span><br><span class="line">					          <span class="keyword">return</span> params.name+<span class="string">'&lt;br/&gt; 未公布感染人数'</span>;</span><br><span class="line">					      &#125;</span><br><span class="line">					    &#125;,</span><br><span class="line">					    <span class="comment">// 视觉映射方案1：,疫情颜色根据传染病疫情等级分类为5个级别：黄色-橙色-深橙色-红色-深红色</span></span><br><span class="line">					    <span class="comment">// 为了是视觉分布更好，可以添加更多的颜色范围，然后适当调小max的值，因为美国和其它国家相差太大</span></span><br><span class="line">					    <span class="comment">/**/</span></span><br><span class="line"><span class="comment">					    visualMap: &#123;</span></span><br><span class="line"><span class="comment">					      min: 1, // 颜色映射对应的最小值，即对应下面的lightskyblue</span></span><br><span class="line"><span class="comment">					      max: 500000, // 颜色映射对应的最大值，即对应下面的orangered</span></span><br><span class="line"><span class="comment">					      text: ['严重', '轻微'], // 映射图上下标记文本</span></span><br><span class="line"><span class="comment">					      realtime: true, // 是否显示拖拽手柄，映射条可以拖拽调整要映射的范围</span></span><br><span class="line"><span class="comment">					      calculable: true, // 拖拽时，是否实时更新地图</span></span><br><span class="line"><span class="comment">					      inRange: &#123;</span></span><br><span class="line"><span class="comment">					        color: ['rgba(222,0,0,0.2)','rgba(160,0,0,1)'] // 颜色映射范围，最小值，过渡值，最大值</span></span><br><span class="line"><span class="comment">					      &#125;</span></span><br><span class="line"><span class="comment">					    &#125;,</span></span><br><span class="line"><span class="comment">					</span></span><br><span class="line"><span class="comment">					    </span></span><br><span class="line"><span class="comment">					</span></span><br><span class="line"><span class="comment">					</span></span><br><span class="line"><span class="comment">					    // 具体数据</span></span><br><span class="line"><span class="comment">					    series: [</span></span><br><span class="line"><span class="comment">					      &#123;</span></span><br><span class="line"><span class="comment">					        name: '全球各国确诊病例', // 系列名称</span></span><br><span class="line"><span class="comment">					        zoom:1.2,//地图大小</span></span><br><span class="line"><span class="comment">					        type: 'map', // 系列类型，地图</span></span><br><span class="line"><span class="comment">					        map: 'world', // 要使用的地图，即上面注册的地图名称</span></span><br><span class="line"><span class="comment">					        roam: true, // 开启鼠标缩放和平移漫游</span></span><br><span class="line"><span class="comment">					        label: &#123; // 图形上的文本标签，地图默认显示数据名</span></span><br><span class="line"><span class="comment">					          show: true,</span></span><br><span class="line"><span class="comment">					          fontSize:8,</span></span><br><span class="line"><span class="comment">					          //formatter: '&#123;b&#125;', // b是数据名，c是数据值</span></span><br><span class="line"><span class="comment">					          formatter:function (params, ticket, callback) &#123;</span></span><br><span class="line"><span class="comment">					            //公布了数据 且 数据累计数据大于5万的显示国家名称</span></span><br><span class="line"><span class="comment">					            if(params.data &amp;&amp; params.data.value&gt;50000) &#123;</span></span><br><span class="line"><span class="comment">					              return params.name;</span></span><br><span class="line"><span class="comment">					            &#125;else&#123;</span></span><br><span class="line"><span class="comment">					              return '';</span></span><br><span class="line"><span class="comment">					            &#125;</span></span><br><span class="line"><span class="comment">					          &#125;</span></span><br><span class="line"><span class="comment">					        &#125;,</span></span><br><span class="line"><span class="comment">					        data: data.g_data,</span></span><br><span class="line"><span class="comment">					      &#125;</span></span><br><span class="line"><span class="comment">					    ]</span></span><br><span class="line"><span class="comment">					  &#125;;</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">				break;</span></span><br><span class="line"><span class="comment">				case 3:&#123;</span></span><br><span class="line"><span class="comment">					opt = &#123;</span></span><br><span class="line"><span class="comment">					    // 设置标题和副标题及副标题跳转链接</span></span><br><span class="line"><span class="comment">					    title: &#123;</span></span><br><span class="line"><span class="comment">					      text: '新冠疫情-全球新增数据',</span></span><br><span class="line"><span class="comment">					      subtext: '数据来源--开课吧',</span></span><br><span class="line"><span class="comment">					      sublink: 'https://www.kaikeba.com'</span></span><br><span class="line"><span class="comment">					    &#125;,</span></span><br><span class="line"><span class="comment">					    // 数据提示框</span></span><br><span class="line"><span class="comment">					    tooltip: &#123;</span></span><br><span class="line"><span class="comment">					      trigger: 'item', // item放到数据区域触发</span></span><br><span class="line"><span class="comment">					      formatter:function (params, ticket, callback) &#123;</span></span><br><span class="line"><span class="comment">					        if(params.data)</span></span><br><span class="line"><span class="comment">					          return params.name+'&lt;br/&gt;'+params.data.value+' (人)';</span></span><br><span class="line"><span class="comment">					        else</span></span><br><span class="line"><span class="comment">					          return params.name+'&lt;br/&gt; 未公布感染人数';</span></span><br><span class="line"><span class="comment">					      &#125;</span></span><br><span class="line"><span class="comment">					    &#125;,</span></span><br><span class="line"><span class="comment">					    // 视觉映射方案1：,疫情颜色根据传染病疫情等级分类为5个级别：黄色-橙色-深橙色-红色-深红色</span></span><br><span class="line"><span class="comment">					    // 为了是视觉分布更好，可以添加更多的颜色范围，然后适当调小max的值，因为美国和其它国家相差太大</span></span><br><span class="line"><span class="comment">					    /**/</span></span><br><span class="line">					    visualMap: &#123;</span><br><span class="line">					      min: <span class="number">0</span>, <span class="comment">// 颜色映射对应的最小值，</span></span><br><span class="line">					      max: <span class="number">20000</span>, <span class="comment">// 颜色映射对应的最大值</span></span><br><span class="line">					      text: [<span class="string">'严重'</span>, <span class="string">'轻微'</span>], <span class="comment">// 映射图上下标记文本</span></span><br><span class="line">					      realtime: <span class="literal">true</span>, <span class="comment">// 是否显示拖拽手柄，映射条可以拖拽调整要映射的范围</span></span><br><span class="line">					      calculable: <span class="literal">true</span>, <span class="comment">// 拖拽时，是否实时更新地图</span></span><br><span class="line">					      inRange: &#123;</span><br><span class="line">					        color: [<span class="string">'rgba(160,0,0,0)'</span>,<span class="string">'rgba(160,0,0,1)'</span>] <span class="comment">// 颜色映射范围，最小值，过渡值，最大值</span></span><br><span class="line">					      &#125;</span><br><span class="line">					    &#125;,</span><br><span class="line">					    <span class="comment">// 具体数据</span></span><br><span class="line">					    series: [</span><br><span class="line">					      &#123;</span><br><span class="line">					        name: <span class="string">'全球各国新增病例'</span>, <span class="comment">// 系列名称</span></span><br><span class="line">					        zoom:<span class="number">1.2</span>,<span class="comment">//地图大小</span></span><br><span class="line">					        type: <span class="string">'map'</span>, <span class="comment">// 系列类型，地图</span></span><br><span class="line">					        map: <span class="string">'world'</span>, <span class="comment">// 要使用的地图，即上面注册的地图名称</span></span><br><span class="line">					        roam: <span class="literal">true</span>, <span class="comment">// 开启鼠标缩放和平移漫游</span></span><br><span class="line">					        label: &#123; <span class="comment">// 图形上的文本标签，地图默认显示数据名</span></span><br><span class="line">					          show: <span class="literal">true</span>,</span><br><span class="line">					          fontSize:<span class="number">8</span>,</span><br><span class="line">					          <span class="comment">//formatter: '&#123;b&#125;', // b是数据名，c是数据值</span></span><br><span class="line">					          formatter:<span class="function"><span class="keyword">function</span> (<span class="params">params, ticket, callback</span>) </span>&#123;</span><br><span class="line">					            <span class="comment">//公布了数据 且 数据累计数据大于5万的显示国家名称</span></span><br><span class="line">					            <span class="keyword">if</span>(params.data &amp;&amp; params.data.value&gt;<span class="number">1000</span> || params.name == <span class="string">'中国'</span>) &#123;</span><br><span class="line">					              <span class="keyword">return</span> params.name;</span><br><span class="line">					            <span class="keyword">else</span>&#123;</span><br><span class="line">					              <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">					            &#125;</span><br><span class="line">					          &#125;</span><br><span class="line">					        &#125;,</span><br><span class="line">					        data: data.g_today,</span><br><span class="line">					      &#125;</span><br><span class="line">					    ]</span><br><span class="line">					  &#125;;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			 myChart.setOption(opt);</span><br><span class="line">		&#125;</span><br><span class="line">		updateMap(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

</blockquote>
<h1 id="动态网页JSP"><a href="#动态网页JSP" class="headerlink" title="动态网页JSP"></a><strong>动态网页JSP</strong></h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote>
<p>静态网页 -&gt; 动态网页 </p>
<p>JSP 全称JavaServer Pages </p>
<p>是由Sun Microsystems公司主导创建的一种动态网页技术标准。 </p>
<p>JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成网页，然后供用户浏 览。 </p>
<p>原理：根据Java程序获取的数据+前端程序员的界面模板 生成新的网页供用户访问。</p>
</blockquote>
<h2 id="三种代码块"><a href="#三种代码块" class="headerlink" title="三种代码块"></a>三种代码块</h2><blockquote>
<p>Java代码执行区域（脚本标签）： </p>
<p>​                特点：每次用户访问，代码都会执行。 </p>
<p>​                &lt;% </p>
<p>​                        Java代码编写在这里 </p>
<p>​                %&gt; </p>
<p>Java代码成员区域（声明标签）： </p>
<p>​                特点： </p>
<p>​                                只能用于定义成员。（以这次任务涉及的知识点来说，定义变量）  </p>
<p>​                                这里的代码，只会在第一个用户访问时执行。 </p>
<p>​                                                第一个用户访问时这里如果定义了变量，那么在服务器关闭之前，后续用户访问时，在 &lt;%%&gt;代码块中都可以重复使用这个变量。 </p>
<p>​                &lt;%! </p>
<p>​                                Java代码编写在这里 </p>
<p>​                %&gt; </p>
<p>将数据输出到页面模板（表达式标签）： </p>
<p>​                特点： </p>
<p>​                                每次用户访问，代码都会执行。 </p>
<p>​                                语句的结尾不加分号 </p>
<p>​                &lt;%=Java中的数据或变量%&gt;</p>
</blockquote>
<h1 id="微信公众号的申请"><a href="#微信公众号的申请" class="headerlink" title="微信公众号的申请"></a><strong>微信公众号的申请</strong></h1><blockquote>
<p>输入微信公众平台的网址 mp.weixin.qq.com 注册订阅号（其他需要企业或者组织才能注册）</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818121643.png" alt="image-20200818121642612"></p>
<p>按照步骤进行操作即可，后续需要身份认证才能操作。</p>
</blockquote>
<h1 id="疫情地图的页面实现"><a href="#疫情地图的页面实现" class="headerlink" title="疫情地图的页面实现"></a><strong>疫情地图的页面实现</strong></h1><blockquote>
<p>在JSP代码中，嵌入疫情数据读取代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个URL类的对象url</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://zaixianke.com/yq/all"</span>);</span><br><span class="line"><span class="comment">//2. 通过URL类的对象url打开网络连接 , 并得到连接对象conn</span></span><br><span class="line">URLConnection conn = url.openConnection();</span><br><span class="line"><span class="comment">//3. 通过连接对象 , 得到用于读取网页内容的输入流 is</span></span><br><span class="line">InputStream is = conn.getInputStream();</span><br><span class="line"><span class="comment">//4. 将上述的字节流is 装饰为字符流 , 将字符流再装饰为一次能读取一行的字符流br</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is,<span class="string">"UTF-8"</span>));</span><br><span class="line"><span class="comment">//5. 通过字符流br,读取一行内容,并将内容存储到变量text中</span></span><br><span class="line">String text = br.readLine();</span><br><span class="line"><span class="comment">//6. 可以将读取到的内容text 输出显示到控制台</span></span><br><span class="line">System.out.println(text);</span><br><span class="line"></span><br><span class="line"><span class="comment">//不要忘记导包</span></span><br></pre></td></tr></table></figure>

<p>将读取到的数据输出到前端模板上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &lt;%=text%&gt;;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818122701.png" alt=""></p>
</blockquote>
<blockquote>
<p>不要忘记导包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;%@ page session=<span class="string">"false"</span> <span class="keyword">import</span>=<span class="string">"java.net.URL, java.net.URLConnection, java.io.InputStream, java.io.BufferedReader, java.io.InputStreamReader"</span> pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818122745.png" alt="image-20200818122745101"></p>
</blockquote>
<blockquote>
<p>此时疫情地图的动态实现就完成了</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215455.png" alt="image-20200817213747943"></p>
</blockquote>
<h1 id="高并发优化"><a href="#高并发优化" class="headerlink" title="高并发优化"></a><strong>高并发优化</strong></h1><h2 id="目前并发详情"><a href="#目前并发详情" class="headerlink" title="目前并发详情"></a>目前并发详情</h2><blockquote>
<p>在浏览器中按下F12，可以看到图中这次请求为296ms，一个用户请求大致会消耗服务器0.3s，我们服务器申请的为两核 的，每秒的并发量大致不会超过10个人。</p>
<p><img src="C:%5CUsers%5Cllz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200818211142863.png" alt="image-20200818211142863"></p>
</blockquote>
<h2 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h2><blockquote>
<p>首先我们来了解一下，我们的时间主要消耗在哪里</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818211656.png" alt="image-20200818211655742"></p>
<p>具体流程如图：北京用户访问==&gt;(10-20ms)访问阿里云（张家口）服务器==&gt;（50-100ms）访问北京开课吧服务器获取数据==&gt;(50-100ms)北京服务器返回数据给张家口服务器==&gt;(10-20ms)返回给用户。整体消耗120ms-240ms。</p>
<p>而开课吧服务器的数据每十分钟更新一次，所以我们可以在阿里云服务器上设置一个疫情数据的缓存，每十分钟更新一次。</p>
<p>代码实现如下：</p>
<p>index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page session=<span class="string">"false"</span> <span class="keyword">import</span>=<span class="string">"java.net.URL, java.net.URLConnection, java.io.InputStream, java.io.BufferedReader, java.io.InputStreamReader"</span> pageEncoding=<span class="string">"UTF-8"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;疫情地图&lt;/title&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="comment">// 记录时间戳 ，0表示1970年1月1日</span></span><br><span class="line">    <span class="keyword">long</span> time = <span class="number">0</span>;</span><br><span class="line">    String text;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//时间戳:指的是格林威治开始时( 1970-1-1 00:00) 历到月前的毫秒数13位数字</span></span><br><span class="line">    <span class="keyword">if</span>(System.currentTimeMillis() - time &gt; <span class="number">600000</span>) &#123;        <span class="comment">// 600000表示10分钟</span></span><br><span class="line">        <span class="comment">// 更新时间</span></span><br><span class="line">        time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//1. 创建一个URL类的对象url </span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"https://zaixianke.com/yq/all"</span>); </span><br><span class="line">        <span class="comment">//2. 通过URL类的对象url打开网络连接 , 并得到连接对象conn </span></span><br><span class="line">        URLConnection conn = url.openConnection(); </span><br><span class="line">        <span class="comment">//3. 通过连接对象 , 得到用于读取网页内容的输入流 is </span></span><br><span class="line">        InputStream is = conn.getInputStream(); </span><br><span class="line">        <span class="comment">//4. 将上述的字节流is 装饰为字符流 ,</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is,<span class="string">"UTF-8"</span>));</span><br><span class="line">        <span class="comment">//5. 通过字符流br,读取一行内容,并将内容存储到变量text中</span></span><br><span class="line">	   text = br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">    <span class="keyword">var</span> data = &lt;%=text%&gt;;</span><br><span class="line">&lt;/script&gt;        </span><br><span class="line">&lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="https://cdn.bootcss.com/echarts/4.7.0/echarts.min.js"&gt;&lt;/script&gt; </span><br><span class="line">&lt;script src="http://cdn.zaixianke.com/china.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="http://cdn.zaixianke.com/world.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id="main" style="width: 100%;height:600px;"&gt;&lt;/div&gt; &lt;br&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align:center"</span>&gt;</span><br><span class="line">		&lt;a style="color:#333" class="control" align="center" href="javascript:updateMap(0)"&gt;国内累计&lt;/a&gt;</span><br><span class="line">		&lt;a style="color:#333" class="control" align="center" href="javascript:updateMap(1)"&gt;国内新增&lt;/a&gt;</span><br><span class="line">		&lt;a style="color:#333" class="control" align="center" href="javascript:updateMap(2)"&gt;全球累计&lt;/a&gt;</span><br><span class="line">		&lt;a style="color:#333" class="control" align="center" href="javascript:updateMap(3)"&gt;全球新增&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src="control.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="优化后并发承载变化"><a href="#优化后并发承载变化" class="headerlink" title="优化后并发承载变化"></a>优化后并发承载变化</h2><blockquote>
<p>代码更改后，我们来刷新看一下时间：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818213002.png" alt="image-20200818213002327"></p>
<p>基本稳定在20ms左右。</p>
</blockquote>
<h1 id="世界疫情地图部署上线"><a href="#世界疫情地图部署上线" class="headerlink" title="世界疫情地图部署上线"></a><strong>世界疫情地图部署上线</strong></h1><blockquote>
<p>微信扫码登录注册好的订阅号，点击自动回复，打开自动回复（个人申请的账号，不能进行企业认证无法加入连接，只能通过自动回复的方式实现可跳转的链接）</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818162956.png" alt="image-20200818162345246"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818162947.png" alt="image-20200818162938615"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200818180346.png" alt="image-20200818180345907"></p>
<p>至此，我们的疫情地图就成功上线订阅号啦。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>AC-递归实现指数型枚举</title>
    <url>/2020/08/15/AC-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p>从 1~n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个整数n。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好1个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤15</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<p><strong>题解:</strong></p>
<blockquote>
<p>暴力枚举</p>
<p>整体思路是准备出一个数组，将每个位置都遍历一次，选中的置为1，未重的置为-1，最后将其输出即可。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断何时选取到了规定的数目,并将符合条件的输出</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(b[i] == <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归选择,选中的置为1,未选中的置为-1,还未操作的置为0</span></span><br><span class="line">    b[a] = <span class="number">1</span>;</span><br><span class="line">    dfs(a+<span class="number">1</span>);</span><br><span class="line">    b[a] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    b[a] = <span class="number">-1</span>;</span><br><span class="line">    dfs(a+<span class="number">1</span>);</span><br><span class="line">    b[a] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>AC-递归实现排列型枚举</title>
    <url>/2020/08/16/AC-%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p>把 1~nn 这 nn 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数n。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行1个。</p>
<p>首先，同一行相邻两个数用一个空格隔开。</p>
<p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤91≤n≤9</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>题解思路:</strong></p>
<p>暴力枚举每个位置上的所有数字的可能，前面位置已经时用过的数字不能重复使用，定义used数组来判断是否使用过该数字，满足条件后输出。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b[N],n;</span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            b[t]=i;</span><br><span class="line">            dfs(t+<span class="number">1</span>);</span><br><span class="line">            b[t]=<span class="number">0</span>;</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>AC-费解的开关</title>
    <url>/2020/08/18/AC-%E8%B4%B9%E8%A7%A3%E7%9A%84%E5%BC%80%E5%85%B3/</url>
    <content><![CDATA[<p>你玩过“拉灯”游戏吗？25盏灯排成一个5x5的方形。每一个灯都有一个开关，游戏者可以改变它的状态。每一步，游戏者可以改变某一个灯的状态。游戏者改变一个灯的状态会产生连锁反应：和这个灯上下左右相邻的灯也要相应地改变其状态。</p>
<p>我们用数字“1”表示一盏开着的灯，用数字“0”表示关着的灯。下面这种状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10111</span><br><span class="line">01101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>在改变了最左上角的灯的状态后将变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11101</span><br><span class="line">10111</span><br><span class="line">10000</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>再改变它正中间的灯后状态将变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01111</span><br><span class="line">11001</span><br><span class="line">11001</span><br><span class="line">10100</span><br><span class="line">11011</span><br></pre></td></tr></table></figure>

<p>给定一些游戏的初始状态，编写程序判断游戏者是否可能在6步以内使所有的灯都变亮。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入正整数nn，代表数据中共有nn个待解决的游戏初始状态。</p>
<p>以下若干行数据分为nn组，每组数据有5行，每行5个字符。每组数据描述了一个游戏的初始状态。各组数据间用一个空行分隔。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一共输出nn行数据，每行有一个小于等于6的整数，它表示对于输入数据中对应的游戏状态最少需要几步才能使所有灯变亮。</p>
<p>对于某一个游戏初始状态，若6步以内无法使所有灯变亮，则输出“-1”。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;n≤5000&lt;n≤500</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">00111</span><br><span class="line">01011</span><br><span class="line">10001</span><br><span class="line">11010</span><br><span class="line">11100</span><br><span class="line"></span><br><span class="line">11101</span><br><span class="line">11101</span><br><span class="line">11110</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line"></span><br><span class="line">01111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br><span class="line">11111</span><br></pre></td></tr></table></figure>

<p>输出样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<p>题解:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> g[N][N], backup[N][N];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = x + dx[i], b = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || a &gt;= <span class="number">5</span> || b &lt; <span class="number">0</span> || b &gt;= <span class="number">5</span>) <span class="keyword">continue</span>;   <span class="comment">// 在边界外，直接忽略即可</span></span><br><span class="line">        g[a][b] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T -- )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) <span class="built_in">cin</span> &gt;&gt; g[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> op = <span class="number">0</span>; op &lt; <span class="number">32</span>; op ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(backup, g, <span class="keyword">sizeof</span> g);</span><br><span class="line">            <span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">                <span class="keyword">if</span> (op &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">step</span> ++ ;</span><br><span class="line">                    <span class="built_in">turn</span>(<span class="number">0</span>, i);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++ )</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++ )</span><br><span class="line">                    <span class="keyword">if</span> (g[i][j] == <span class="string">'0'</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">step</span> ++ ;</span><br><span class="line">                        <span class="built_in">turn</span>(i + <span class="number">1</span>, j);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">bool</span> dark = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">                <span class="keyword">if</span> (g[<span class="number">4</span>][i] == <span class="string">'0'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    dark = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!dark) res = <span class="built_in">min</span>(res, <span class="built_in">step</span>);</span><br><span class="line">            <span class="built_in">memcpy</span>(g, backup, <span class="keyword">sizeof</span> g);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res &gt; <span class="number">6</span>) res = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Java基础-实现定时关机功能</title>
    <url>/2020/08/18/Java%E5%9F%BA%E7%A1%80-%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%85%B3%E6%9C%BA%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="任务名称-自动关机程序"><a href="#任务名称-自动关机程序" class="headerlink" title="任务名称: 自动关机程序"></a>任务名称: 自动关机程序</h1><blockquote>
<p>任务描述: </p>
<blockquote>
<p>1、提示用户，欢迎使用某某 关机程序 </p>
<p>2、提示用户，输入多少分钟后关机</p>
<p>3、根据用户输入，进行自动关机 </p>
<p>4、开始自动关机时，提示用户xx分钟后关机 </p>
</blockquote>
</blockquote>
<h1 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java <strong>基础</strong></h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="__标识符 __"></a>__标识符 __</h2><blockquote>
<p>Java对包、类、方法、参数和变量等要素命名时 使用的字符序列成为标识符，规则： </p>
<blockquote>
<ol>
<li>不能以数字开头。 </li>
<li>由数字、字母、下划线_和美元符号$组成。 </li>
<li>长度无限制 </li>
<li>不能是Java中的保留关键字</li>
</ol>
</blockquote>
<p>规范： 不遵守不会出错， 但是在团队协同开发中 ，会被团队嫌弃。</p>
</blockquote>
<h2 id="单行注释"><a href="#单行注释" class="headerlink" title="__单行注释 __"></a>__单行注释 __</h2><blockquote>
<p>//单行注释的范围: 从//开始 到 行的结束 </p>
<p>//注释: 注释是对代码的解释和说明,注释只是为了提高代码的可读性,注释不会被计算机作为指令执行 </p>
</blockquote>
<h2 id="定时关机"><a href="#定时关机" class="headerlink" title="定时关机"></a><strong>定时关机</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">	<span class="comment">//代码分为结构定义语句, 和 功能执行语句. 功能执行语句必须以分号结尾</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//注释是对代码的解释和说明,注释只是为了提高代码的可读性,注释不会被计算机作为指令执行</span></span><br><span class="line">        <span class="comment">//关机</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"shutdown -s -t 1000"</span>);</span><br><span class="line">        <span class="comment">//取消关机</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"shutdown -a"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="导出jar文件流程"><a href="#导出jar文件流程" class="headerlink" title="导出jar文件流程"></a><strong>导出jar文件流程</strong></h2><blockquote>
<p>Files—&gt;Project Structure—&gt;Artifacts—&gt;jar—&gt;from modules with dependencies</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823111514.png" alt="image-20200823111016250"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823111630.png" alt="image-20200823111630574"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823112117.png" alt="image-20200823111815055"></p>
<p>选择要导出的文件主方法位置</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823112354.png" alt="image-20200823112354006"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823112452.png" alt="image-20200823112452118"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823112517.png" alt="image-20200823112517126"></p>
<p>此时就完成了Project Structure里的配置,</p>
<p>回到idea 主菜单,选择“Build —&gt;Build Artifacts—&gt;Build</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823131637.png" alt="image-20200823131636866"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823131701.png" alt="image-20200823131701227"></p>
<p>至此生成最终的可运行的jar。</p>
</blockquote>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><blockquote>
<p>变量就是系统为程序分配的一块内存单元 ， 用于存储各种类型的数据。 由于该存储单元的数据可以发生 改变，因此得名“变量”。</p>
<p> 创建变量的格式：</p>
<p>​                 数据类型 变量名 = 初始值; </p>
<p>更改变量的内容： </p>
<p>​                变量名 = 新的值; </p>
<p>如何使用变量： </p>
<p>​                在后续的程序代码中,变量的名称就表示变量中存储的内容.所以直接使用名称即可</p>
</blockquote>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h3><blockquote>
<p>由于变量记录的数据内容大小不同， 导致所需的存储单元大小不同。</p>
<p> 这些不同大小的存储单元， 在Java中使用数据类型的概念加以描述。 </p>
<p>8种基本数据类型：</p>
<p>​                 数值类型6种：byte、short、int、long、float、double </p>
<p>​                字符类型：char </p>
<p>​                布尔类型：boolean （取值：true或false）</p>
<p> 创建变量的示例： </p>
<p>​                int x = 20; </p>
<p>​                x = 30;//x在内存中存储的数据就更新为了30</p>
</blockquote>
<h3 id="引用数据类型-（工具相关的数据类型）"><a href="#引用数据类型-（工具相关的数据类型）" class="headerlink" title="引用数据类型 （工具相关的数据类型）"></a><strong>引用数据类型 （工具相关的数据类型）</strong></h3><blockquote>
<p>字符串：String </p>
<p>创建变量的示例: </p>
<p>​                String text = “床前明月光,玻璃好上霜.要不及时擦,整不好得脏.”; </p>
<p>​                text = “从前有座山,山上有座庙,庙里有个老和尚正在对小和尚说:嘿嘿嘿”;</p>
</blockquote>
<h2 id="进行文字的显示"><a href="#进行文字的显示" class="headerlink" title="进行文字的显示"></a><strong>进行文字的显示</strong></h2><blockquote>
<p>方式1.通过普通文字展示 </p>
<p>​                System.out.println(变量或数据); </p>
<p>方式2.通过红色文字展示(通常用于提示错误) </p>
<p>​                System.err.println(变量或数据);</p>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h2><blockquote>
<p>算术运算符： +-*/% </p>
<p>赋值运算符： = : 将等号右边的运算结果赋值给等号左边. </p>
<p>比较运算符： (特殊:运算的结果都是boolean类型的,非true即false) </p>
<p>​                == :比较符号两边是否相等,相等时结果为true </p>
<p>​                != :比较符号两边是否步相等,不相等时结果为false </p>
<p>​                &gt; :比较符号左边是否大于符号右边,大于时结果为true </p>
<p>​                &lt; :比较符号左边是否小于符号右边,小于时结果为true </p>
<p>​                &gt;= : … </p>
<p>​                &lt;= : … </p>
<p>字符串连接符： + </p>
<p>​                当+号的任意一边为字符串时, +号的含义就不再是算数运算符,而是字符串连接符. </p>
<p>​                例如: </p>
<p>​                                String text = “He”+”llo”+12;//结果是Hello12 </p>
<p>​                常见面试题: </p>
<p>​                                String text = 1+1+1+”1”+”1”+1+1;//“31111” </p>
</blockquote>
<h2 id="接收用户的键盘输入"><a href="#接收用户的键盘输入" class="headerlink" title="接收用户的键盘输入"></a><strong>接收用户的键盘输入</strong></h2><blockquote>
<p>//1. 用于创建接收用户输入的变量input </p>
<p>Scanner input = new Scanner(System.in); </p>
<p>//2. 先提示用户请输入 </p>
<p>System.out.println(“请输入一个秒数”); </p>
<p>//3. 接收用户输入 </p>
<p>String text = input.nextLine(); </p>
<p>System.out.println(“你输入的是:”+text);</p>
</blockquote>
<h1 id="定时关机程序"><a href="#定时关机程序" class="headerlink" title="定时关机程序"></a><strong>定时关机程序</strong></h1><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.llz.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">shutdown</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.	用于创建接收用户输入的变量input</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//2.	先提示用户请输入</span></span><br><span class="line">        System.out.println(<span class="string">"您想在几分钟后关机"</span>);</span><br><span class="line">        <span class="comment">//3.	接收用户输入</span></span><br><span class="line">        <span class="keyword">int</span> text = input.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"计算机将在"</span>+text+<span class="string">"分钟后关机"</span>);</span><br><span class="line">        text *= <span class="number">60</span> ;</span><br><span class="line">        <span class="comment">//关机</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"shutdown -s -t "</span>+text);</span><br><span class="line">        <span class="comment">//取消关机</span></span><br><span class="line"><span class="comment">//        Runtime.getRuntime().exec("shutdown -a");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</blockquote>
]]></content>
  </entry>
  <entry>
    <title>LeetCode-70.爬楼梯</title>
    <url>/2020/08/22/LeetCode-70.%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    <content><![CDATA[<h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a><strong>原题链接:</strong></h1><p><a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs</a></p>
<p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p>
<p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>
<p>注意：给定 n 是一个正整数。</p>
<h1 id="示例1-："><a href="#示例1-：" class="headerlink" title="示例1 ："></a><strong>示例1 ：</strong></h1><blockquote>
<p>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶</li>
<li>2 阶</li>
</ol>
</blockquote>
<h1 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><strong>示例 2：</strong></h1><blockquote>
<p>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p>
<ol>
<li>1 阶 + 1 阶 + 1 阶</li>
<li>1 阶 + 2 阶</li>
<li>2 阶 + 1 阶</li>
</ol>
</blockquote>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a><strong>题解:</strong></h1><blockquote>
<p>动态规划:</p>
<p>给定 n 级台阶,最后一步可能为1 或 2 ,假定 n-1 级台阶或 n-2 级台阶的方法已经确定,则可得出 n 级台阶的公式: </p>
<p>f(n) = f(n - 1) + f(n - 2)(n &gt; 2)</p>
<p>类似斐波那契数列的求值。</p>
<p>接下来我们讨论一下极限，n 为正整数， n极限为1时，f(n)=1，n=2时f(n)=2，我们可以看出爬当前阶楼梯的方法只跟当前阶楼梯的前一阶以及前前阶楼梯有关，接下来只需定义两个变量往后递推即可。</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a><strong>代码:</strong></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">            b=a+b;</span><br><span class="line">            a=b-a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200822113541.png" alt="image-20200822113411499"></p>
]]></content>
  </entry>
  <entry>
    <title>IDEA打jar包报错</title>
    <url>/2020/08/22/IDEA%E6%89%93jar%E5%8C%85%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h1 id="背景："><a href="#背景：" class="headerlink" title="背景："></a><strong>背景</strong>：</h1><p>之前这个项目中的class打过一次jar包，想在另一个 class 中打包报了如图中的错误，</p>
<h1 id="报错："><a href="#报错：" class="headerlink" title="报错："></a><strong>报错</strong>：</h1><p>E:/study/IDEA/IDEA-project/Demo1/src/META-INF/MANIFEST. MF’ already exists in VFS</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823135436.png" alt="image-20200823135435605"></p>
<h1 id="原因："><a href="#原因：" class="headerlink" title="原因："></a><strong>原因</strong>：</h1><p>就是因为IDEA已对该module打过jar包，module中已经存在MANIFEST.MF文件夹。</p>
<h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法</strong>：</h1><p>只需找到将该目录下的此文件删除即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823134922.png" alt="image-20200823134922290"></p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode-11.盛最多水的容器</title>
    <url>/2020/08/24/LeetCode-11.%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h1><p><a href="https://leetcode-cn.com/problems/container-with-most-water/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
</blockquote>
<blockquote>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200824232413.png" alt="image-20200824232413405"></p>
<blockquote>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
</blockquote>
<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><blockquote>
<p>输入：[1,8,6,2,5,4,8,3,7]<br>输出：49</p>
</blockquote>
<h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路:"></a>题解思路:</h1><blockquote>
<p>看到这个题目可以想到双指针的解法，但是双指针解法是否正确，会不会漏掉一些情况呢。</p>
<p>首先我们按着以下步骤思考：</p>
<ol>
<li>当前两条直线是最两侧的直线，x 作为宽固定，此时取到最大值，其他的之线组合 x 逐渐缩小。</li>
<li>由图看出，左边线段较小，水的体积由最短的线条决定。<ol>
<li>此时如果移动左边的边界，x 一定减小，而 h 可能最小值小，可能比最小值大。（结果待定）</li>
<li>此时如果移动右边的边界，x 一定减小，而 h 只有可能比最小的线段还小。          （结果不变或变小）</li>
</ol>
</li>
<li>由此我们可以看出，只能移动较短的线条才有可能取到更大的值，依此类推，将结果遍历一次即可。</li>
</ol>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="built_in">height</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="built_in">height</span>.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="built_in">min</span>(<span class="built_in">height</span>[l], <span class="built_in">height</span>[r]) * (r - l);</span><br><span class="line">            a = <span class="built_in">max</span>(a, sum);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">height</span>[l] &lt;= <span class="built_in">height</span>[r]) &#123;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                --r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.双指针</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200825104409.png" alt="image-20200825104409725"></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>LeetCode-26. 删除排序数组中的重复项</title>
    <url>/2020/08/24/LeetCode-26.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h1><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>
<blockquote>
<p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
</blockquote>
<h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h1><blockquote>
<p>给定数组 nums = [1,1,2], </p>
<p>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h2><blockquote>
<p>给定 nums = [0,0,1,1,1,2,2,3,3,4],</p>
<p>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</p>
<p>你不需要考虑数组中超出新长度后面的元素。</p>
</blockquote>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><blockquote>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p>
<p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p>
</blockquote>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><blockquote>
<p>/*<br>1.暴力循环一次，当前一位和后一位相同，删除后一位<br>2.暴力循环一次，当前一位和后一位相同，后者向前移动覆盖前面相同的值。指定一个cout，相同时让其位数加一，代表后者需要让其移动多少位。<br>3.用自带的 unique 函数覆盖重复元素<br>*/</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="comment">// for (int i= 1; i&lt; nums.size();i++) &#123;</span></span><br><span class="line">        <span class="comment">//         while (i&lt;nums.size() &amp;&amp; nums[i-1] == nums[i]) nums.erase(nums.begin() + i);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// return nums.size();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.</span></span><br><span class="line">        <span class="comment">// int size = nums.size();</span></span><br><span class="line">        <span class="comment">// int cnt = 0; //统计当前元素需要前移的位数，注意还是计数排序思想！！！只不过不需要整个数组</span></span><br><span class="line">        <span class="comment">// for(int i=1; i&lt;size; ++i)&#123;</span></span><br><span class="line">        <span class="comment">//     if(nums[i] == nums[i-1])</span></span><br><span class="line">        <span class="comment">//         cnt++;</span></span><br><span class="line">        <span class="comment">//     nums[i-cnt] = nums[i]; //前移cnt个位置           </span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return size-cnt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.</span></span><br><span class="line">        <span class="keyword">return</span> unique(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>())-nums.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200825105218.png" alt="image-20200825105218069"></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>LN-JK-2.数组、链表、跳表的基本实现和特征</title>
    <url>/2020/08/25/LN-JK-2.%E6%95%B0%E7%BB%84%E3%80%81%E9%93%BE%E8%A1%A8%E3%80%81%E8%B7%B3%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h1 id="数组、链表、跳表基本实现和特性"><a href="#数组、链表、跳表基本实现和特性" class="headerlink" title="数组、链表、跳表基本实现和特性"></a>数组、链表、跳表基本实现和特性</h1><h2 id="Array-数组"><a href="#Array-数组" class="headerlink" title="Array(数组)"></a>Array(数组)</h2><ul>
<li>java,c++: int a[100];//初始化的时候先定义好容量</li>
<li>Python： list=[]//直接定义一个数组</li>
<li>JavaScript: let x=[1,2,3]</li>
</ul>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th>方法</th>
<th>复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>prepend</td>
<td>O(n)</td>
</tr>
<tr>
<td>append</td>
<td>O(1)</td>
</tr>
<tr>
<td>lookup</td>
<td>O(1)</td>
</tr>
<tr>
<td>insert</td>
<td>O(n)</td>
</tr>
<tr>
<td>delete</td>
<td>O(n)</td>
</tr>
</tbody></table>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote>
<ol>
<li><p>在链表中，每个元素都有两个属性,Value和Next 。它的每一个元素一般用class定义。Next指向下一个元素。</p>
</li>
<li><p>如果只有一个向后的指针时，这样的链表叫做单链表。</p>
</li>
<li><p>当有两个指针时，这样的链表就叫做双向链表。</p>
</li>
<li><p>头指针用Head表示，尾指针用Tail。最后一个指针它的Next指向空，因为没有Next指针了。Tail的Next指针也可以指回到Head来。这个就叫做循环链表。</p>
</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> &#123;</span></span><br><span class="line">	Node head; </span><br><span class="line">    Node (<span class="keyword">int</span> d) &#123; data = d;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th>方法</th>
<th>复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>prepend</td>
<td>O(1)</td>
</tr>
<tr>
<td>append</td>
<td>O(1)</td>
</tr>
<tr>
<td>lookup</td>
<td>O(n)</td>
</tr>
<tr>
<td>insert</td>
<td>O(1)</td>
</tr>
<tr>
<td>delete</td>
<td>O(1)</td>
</tr>
</tbody></table>
<h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><blockquote>
<p>跳表是为了优化或者是弥补链表的缺陷而设计的。</p>
<p>在原始链表上建立多级索引以提高速度，空间换时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200825111356.png" alt="image-20200825111255912"></p>
</blockquote>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><blockquote>
<p>跳表查询的时间复杂度分析：</p>
<p>时间复杂度：</p>
<p>每次访问一个元素，需要遍历索引的高度，即log n，时间复杂度O(log n)</p>
<p>空间复杂度 ：</p>
<p>索引的节点数为 n/2、n/4、n/8… 整体不会超过n，空间复杂度为O(n)</p>
</blockquote>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><blockquote>
<ol>
<li><p>LRU Cache - Linked list: LRU 缓存机制</p>
</li>
<li><p>Redis - Skip LIst</p>
</li>
</ol>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>LN-JK-1.时间复杂度和空间复杂度</title>
    <url>/2020/08/23/LN-JK-1.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<blockquote>
<p>算法的优劣主要从时间和空间两方面进行分析：</p>
<blockquote>
<p>时间：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。</p>
<p>空间：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。</p>
</blockquote>
</blockquote>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度:"></a>时间复杂度:</h1><h2 id="常见的七种时间复杂度"><a href="#常见的七种时间复杂度" class="headerlink" title="常见的七种时间复杂度"></a>常见的七种时间复杂度</h2><blockquote>
<p>O（1）：Constant Complexity 常数复杂度</p>
<p>O（log n）：Logarithmic Complexity 对数复杂度</p>
<p>O（n）：Linear Complexity 线性时间复杂度</p>
<p>O（n^2）：N square Complexity 平方</p>
<p>O（n^3）：N cubic Complexity 立方</p>
<p>O（2^n）：Exponential Growth 指数</p>
<p>O（n!）：Factorial 阶乘</p>
<p><em>注</em>:<em>用到多种时,只看最高复杂度的运算</em></p>
</blockquote>
<h2 id="七种时间复杂度曲线"><a href="#七种时间复杂度曲线" class="headerlink" title="七种时间复杂度曲线:"></a>七种时间复杂度曲线:</h2><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200824000120.png" alt="image-20200823233037517"></p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><blockquote>
<h3 id="计算：1-2-3-4-…-n"><a href="#计算：1-2-3-4-…-n" class="headerlink" title="计算：1+2+3+4+…+n"></a><strong>计算：1+2+3+4+…+n</strong></h3><p>方法一：从1到n的循环累加 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">	sum+=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法循环了 n 次，时间复杂度为 O(n)。</p>
<p>方法二：公式法 sum = n (n+1)/2</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = n(n+<span class="number">1</span>)/<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>此方法只运行一步，时间复杂度为 O(1)。</p>
</blockquote>
<h3 id="斐波那契额数列"><a href="#斐波那契额数列" class="headerlink" title="斐波那契额数列:"></a><strong>斐波那契额数列</strong>:</h3><blockquote>
<p>递归法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>递归树：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823235645.png" alt="image-20200823233641687"></p>
<p>斐波那契数列递归解法存在大量的冗余，在这里先不做优化，只看时间复杂度为O(2^n)</p>
</blockquote>
<h2 id="主定理"><a href="#主定理" class="headerlink" title="主定理"></a>主定理</h2><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200823235634.png" alt="image-20200823235634487"></p>
<blockquote>
<p>二分查找:                                           O(log n)</p>
<p>二叉树遍历:                                       O(n)</p>
<p>二维矩阵（有序）二分查找:           O(n)</p>
<p>归并:                                                   O(nlog n)</p>
<p>主定理证明比较复杂，只记住这四种即可。</p>
</blockquote>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考:"></a>思考:</h2><blockquote>
<p>二叉树遍历-前序、中序、后序：时间复杂度是多少？<br>图的遍历：时间复杂度是多少？                     O(n)<br>搜索算法：DFS、BFS时间复杂度是多少？   O(n)<br>二分查找：时间复杂度是多少？                     O(log n)</p>
</blockquote>
<h1 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h1><blockquote>
<p>空间复杂度取决于以下因素:</p>
<ol>
<li><p>数组的长度</p>
<p>一维数组 O(n)</p>
<p>二维数组 O(n^2)</p>
</li>
<li><p>递归的深度</p>
<p>注: 递归里面开数组,空间复杂度为两者中的最大值</p>
</li>
</ol>
</blockquote>
<p>上述斐波那契额数列的递归解法的空间复杂度为递归的深度，即O(n);</p>
]]></content>
  </entry>
  <entry>
    <title>LN-JK-3.第二次课堂笔记</title>
    <url>/2020/08/31/LN-JK-3.%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="极客-第二次课堂笔记"><a href="#极客-第二次课堂笔记" class="headerlink" title="极客-第二次课堂笔记"></a>极客-第二次课堂笔记</h1><h1 id="二叉树的基础内容"><a href="#二叉树的基础内容" class="headerlink" title="二叉树的基础内容"></a>二叉树的基础内容</h1><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113006.png" alt="image-20200831113006526"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113030.png" alt="image-20200831113029974"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113053.png" alt="image-20200831113053545"></p>
<h1 id="《验证二叉搜索树》"><a href="#《验证二叉搜索树》" class="headerlink" title="《验证二叉搜索树》"></a>《验证二叉搜索树》</h1><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112935.png" alt="image-20200831112935068"></p>
<blockquote>
<p>通过二叉搜索的性质，我们能想到只需遍历整棵树，并判断 node.left.val &lt; node.val &lt; node.right.val 对于每个结点是否成立。</p>
<p>需要注意的是不仅左子结点（右子结点）需要小于（大于）该结点，而且整个左子树（右子树）的所有的元素都应该小于（大于）该结点。所以我们在遍历的同时需要同结点的上界和下界比较。</p>
<h2 id="方法一：递归-前序遍历"><a href="#方法一：递归-前序遍历" class="headerlink" title="方法一：递归 + 前序遍历"></a>方法一：递归 + 前序遍历</h2><p>上述的思路可以通过递归的方法实现，将当前结点的值与上下界进行比较，然后在对左右子树进行递归。过程如图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112008.png" alt="image-20200831111618331"></p>
<p>如果当前结点的值应检验无效时，返回false。</p>
<p>源码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112241.png" alt="image-20200831111713988"></p>
<h2 id="方法二：递归-中序遍历"><a href="#方法二：递归-中序遍历" class="headerlink" title="方法二：递归 + 中序遍历"></a>方法二：递归 + 中序遍历</h2><p>我们也可以采用中序遍历的方式，因为中序遍历后的二叉搜索树是有序的，所以只需判断一次当前结点的值即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112310.png" alt="image-20200831111730767"></p>
<h2 id="方法三：栈-中序遍历"><a href="#方法三：栈-中序遍历" class="headerlink" title="方法三：栈 + 中序遍历"></a>方法三：栈 + 中序遍历</h2><p>基于栈实现中序遍历。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112129.png" alt="image-20200831111752167"></p>
<p>接下来讲解一下如何使用栈实现前中后序遍历，以栈实现中序遍历为例，过程如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112110.png" alt="image-20200831111809138"></p>
</blockquote>
<blockquote>
<h3 id="栈实现中序遍历模板及关键点："><a href="#栈实现中序遍历模板及关键点：" class="headerlink" title="栈实现中序遍历模板及关键点："></a>栈实现中序遍历模板及关键点：</h3><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831112051.png" alt="image-20200831111850897"></p>
<h3 id="栈实现先序遍历："><a href="#栈实现先序遍历：" class="headerlink" title="栈实现先序遍历："></a>栈实现先序遍历：</h3><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831111921.png" alt="image-20200831111919195"></p>
<h3 id="栈实现后序遍历："><a href="#栈实现后序遍历：" class="headerlink" title="栈实现后序遍历："></a>栈实现后序遍历：</h3><p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831111940.png" alt="image-20200831111940549"></p>
<p>综上， 我们分析了递归和栈实现《验证二叉搜索树》的思路。并且学习了二叉树的先中后序遍历。</p>
</blockquote>
<blockquote>
<h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><p>现在再给大家介绍一种遍历方式——层序遍历，层序比遍历非常好理解，就是将二叉树的每一层分遍历，直到最后所有的结点全部遍历完成，这里我们需要的辅助数据结构是队列，因为需要用到队列先进先出的特性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113258.png" alt="image-20200831113258424"></p>
<p>模板代码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113335.png" alt="image-20200831113334688"></p>
<p>大家可以做一下LeeCode102题《二叉树的层序遍历》，进一步理解层序遍历的思想和代码。</p>
</blockquote>
<blockquote>
<h2 id="《二叉树的最大深度》"><a href="#《二叉树的最大深度》" class="headerlink" title="《二叉树的最大深度》"></a>《二叉树的最大深度》</h2><p>接下来我们看下《二叉树的最大深度》, 这道题目根据我们上面总结的内容，不难写出来。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200831113431.png" alt="image-20200831113431668"></p>
<p><img src="C:%5CUsers%5Cllz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200831113516371.png" alt="image-20200831113516371"></p>
<p>注意使用递归和栈实现二叉树的前中后序遍历的是非常重要，很多题目都会涉及到二叉树的遍历，所以大家一定要多加练习，保证能够熟练的写出来。大家可以尝试去完成 LeetCode 中二叉树的前中后序遍历的题目，进行巩固练习。</p>
<p>综上， 我们分析了递归和栈实现 《验证二叉树》《二叉树的最大深度》的思路和源码 并给出拓展,</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>OJ在线编程常见输入输出练习场</title>
    <url>/2020/09/07/OJ%E5%9C%A8%E7%BA%BF%E7%BC%96%E7%A8%8B%E5%B8%B8%E8%A7%81%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E7%BB%83%E4%B9%A0%E5%9C%BA/</url>
    <content><![CDATA[<p>题目链接: <a href="https://ac.nowcoder.com/acm/contest/5646" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/5646</a></p>
<h1 id="A-A-B-1"><a href="#A-A-B-1" class="headerlink" title="A A+B(1)"></a>A A+B(1)</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算a+b </p>
<h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据包括多组。</span><br></pre></td></tr></table></figure>

<h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 5</span><br><span class="line">10 20</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-A-B-2"><a href="#B-A-B-2" class="headerlink" title="B A+B(2)"></a>B A+B(2)</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算a+b </p>
<h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入第一行包括一个数据组数t(1 &lt;&#x3D; t &lt;&#x3D; 100)</span><br><span class="line">接下来每行包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9)</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1 5</span><br><span class="line">10 20</span><br></pre></td></tr></table></figure>

<h2 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="C-A-B-3"><a href="#C-A-B-3" class="headerlink" title="C A+B(3)"></a>C A+B(3)</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算a+b </p>
<h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入包括两个正整数a,b(1 &lt;&#x3D; a, b &lt;&#x3D; 10^9),输入数据有多组, 如果输入为0 0则结束输入</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出a+b的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 5</span><br><span class="line">10 20</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<h2 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">30</span><br></pre></td></tr></table></figure>

<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b &amp;&amp; (a!=<span class="number">0</span> &amp;&amp;b!=<span class="number">0</span>))</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="D-A-B-4"><a href="#D-A-B-4" class="headerlink" title="D A+B(4)"></a>D A+B(4)</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算一系列数的和 </p>
<h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据包括多组。</span><br><span class="line">每组数据一行,每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100), n为0的时候结束输入。</span><br><span class="line">接下来n个正整数,即需要求和的每个正整数。</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 2 3 4</span><br><span class="line">5 1 2 3 4 5</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a &amp;&amp; a!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">            sum+=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E-A-B-5"><a href="#E-A-B-5" class="headerlink" title="E A+B(5)"></a>E A+B(5)</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算一系列数的和 </p>
<h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入的第一行包括一个正整数t(1 &lt;&#x3D; t &lt;&#x3D; 100), 表示数据组数。</span><br><span class="line">接下来t行, 每行一组数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4 1 2 3 4</span><br><span class="line">5 1 2 3 4 5</span><br></pre></td></tr></table></figure>

<h2 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,sum;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="keyword">while</span>(a--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">            sum+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="F-A-B-6"><a href="#F-A-B-6" class="headerlink" title="F A+B(6)"></a>F A+B(6)</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>  计算一系列数的和 </p>
<h2 id="输入描述-5"><a href="#输入描述-5" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line">每行的第一个整数为整数的个数n(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br><span class="line">接下来n个正整数, 即需要求和的每个正整数。</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-5"><a href="#输出描述-5" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1 2 3 4</span><br><span class="line">5 1 2 3 4 5</span><br></pre></td></tr></table></figure>

<h2 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">            sum+=b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="G-A-B-7"><a href="#G-A-B-7" class="headerlink" title="G A+B(7)"></a>G A+B(7)</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>计算一系列数的和</p>
<h2 id="输入描述-6"><a href="#输入描述-6" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据有多组, 每行表示一组输入数据。</span><br><span class="line"></span><br><span class="line">每行不定有n个整数，空格隔开。(1 &lt;&#x3D; n &lt;&#x3D; 100)。</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-6"><a href="#输出描述-6" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每组数据输出求和的结果</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">4 5</span><br><span class="line">0 0 0 0 0</span><br></pre></td></tr></table></figure>

<h2 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">9</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;</span><br><span class="line">        sum+=a;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cin</span>.<span class="built_in">get</span>()==<span class="string">'\n'</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="H-字符串排序-1"><a href="#H-字符串排序-1" class="headerlink" title="H 字符串排序(1)"></a>H 字符串排序(1)</h1><h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>对输入的字符串进行排序后输出</p>
<h2 id="输入描述-7"><a href="#输入描述-7" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入有两行，第一行n</span><br><span class="line"></span><br><span class="line">第二行是n个空格隔开的字符串</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-7"><a href="#输出描述-7" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输出一行排序后的字符串，空格隔开，无结尾空格</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-7"><a href="#输入-7" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">c d a bb e</span><br></pre></td></tr></table></figure>

<h2 id="输出-7"><a href="#输出-7" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a bb c d e</span><br></pre></td></tr></table></figure>

<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; st;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        st.push_back(s);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(st.<span class="built_in">begin</span>(),st.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;st[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="I-字符串排序-2"><a href="#I-字符串排序-2" class="headerlink" title="I 字符串排序(2)"></a>I 字符串排序(2)</h1><h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p>对输入的字符串进行排序后输出</p>
<h2 id="输入描述-8"><a href="#输入描述-8" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line"></span><br><span class="line">每行通过空格隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-8"><a href="#输出描述-8" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组测试用例，输出一行排序过的字符串，每个字符串通过空格隔开</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-8"><a href="#输入-8" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a c bb</span><br><span class="line">f dddd</span><br><span class="line">nowcoder</span><br></pre></td></tr></table></figure>

<h2 id="输出-8"><a href="#输出-8" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a bb c</span><br><span class="line">dddd f</span><br><span class="line">nowcoder</span><br></pre></td></tr></table></figure>

<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)&#123;</span><br><span class="line">        str.push_back(s);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cin</span>.<span class="built_in">get</span>() == <span class="string">'\n'</span>)&#123;</span><br><span class="line">            sort(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>()); </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str[str.<span class="built_in">size</span>()<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            str.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="J-字符串排序-3"><a href="#J-字符串排序-3" class="headerlink" title="J 字符串排序(3)"></a>J 字符串排序(3)</h1><h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>对输入的字符串进行排序后输出</p>
<h2 id="输入描述-9"><a href="#输入描述-9" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多个测试用例，每个测试用例一行。</span><br><span class="line">每行通过,隔开，有n个字符，n＜100</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-9"><a href="#输出描述-9" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组用例输出一行排序后的字符串，用&#39;,&#39;隔开，无结尾空格</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-9"><a href="#输入-9" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a,c,bb</span><br><span class="line">f,dddd</span><br><span class="line">nowcoder</span><br></pre></td></tr></table></figure>

<h2 id="输出-9"><a href="#输出-9" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a,bb,c</span><br><span class="line">dddd,f</span><br><span class="line">nowcoder</span><br></pre></td></tr></table></figure>

<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; str;</span><br><span class="line">    <span class="built_in">string</span> a,s;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(a)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(getline(ss,s,<span class="string">','</span>))</span><br><span class="line">            str.push_back(s);</span><br><span class="line">        sort(str.<span class="built_in">begin</span>(),str.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="string">","</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str[str.<span class="built_in">size</span>()<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        str.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="K-自测本地通过提交为0"><a href="#K-自测本地通过提交为0" class="headerlink" title="K 自测本地通过提交为0"></a>K 自测本地通过提交为0</h1><h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>  每年前几场在线笔试编程题的时候，总有同学询问为什么我本地测试通过，自测也通过，提交代码系统却返回通过率0。 </p>
<p>  这不是系统的错，可能是因为 </p>
<p>  1.你对题目理解错了，你的代码只过了样例或你自己的数据 </p>
<p>  2.你的代码逻辑有问题，你的代码只过了样例或你自己的数据 </p>
<p>  总之就是你的代码只是过了样例和自测数据，后台的测试数据你根本不可见，要多自己思考。 </p>
<p>  这个题目如果你提交后通过率为0，又觉得自己代码是正确的，可以 <a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=41103233" target="_blank" rel="noopener">点击查看</a> 通过的代码 </p>
<p>  谨记： </p>
<p>  当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码! </p>
<p>  当你笔试的时候怀疑系统或者题目数据有问题的时候请务必先怀疑自己的代码!  </p>
<p>  请帮忙把这个练习专题发给你的朋友同学吧，感谢感谢  </p>
<h2 id="输入描述-10"><a href="#输入描述-10" class="headerlink" title="输入描述:"></a>输入描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入有多组测试用例，每组空格隔开两个整数</span><br></pre></td></tr></table></figure>

<h2 id="输出描述-10"><a href="#输出描述-10" class="headerlink" title="输出描述:"></a>输出描述:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于每组数据输出一行两个整数的和</span><br></pre></td></tr></table></figure>

<p>示例1</p>
<h2 id="输入-10"><a href="#输入-10" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1</span><br></pre></td></tr></table></figure>

<h2 id="输出-10"><a href="#输出-10" class="headerlink" title="输出"></a>输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>P-打印图形练习</title>
    <url>/2020/09/08/P-%E6%89%93%E5%8D%B0%E5%9B%BE%E5%BD%A2%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><p>打印图形<br>1<br>3  2<br>4  5  6<br>10 9  8  7</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h1><blockquote>
<p>思路：</p>
<ol>
<li>首先利用双重循环打印斜三角形框架。</li>
<li>将数字按位置顺序存放。</li>
<li>将偶数列的数据逆序排列,打印。</li>
</ol>
</blockquote>
<h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><blockquote>
<p>这里需要注意的有两点：</p>
<ol>
<li><p>如何指定数组中某个位置的逆序输出。</p>
<blockquote>
<p>vector的升序排序是sort(a.begin(),a.end())，降序排序为sort(a.rbegin(),a.rend()).</p>
<p>这里需要注意一下：</p>
<p>c.begin() 返回一个迭代器，它指向容器c的第一个元素</p>
<p>c.end() 返回一个迭代器，它指向容器c的最后一个元素的下一个位置</p>
<p>c.rbegin() 返回一个逆序迭代器，它指向容器c的最后一个元素</p>
<p>c.rend() 返回一个逆序迭代器，它指向容器c的第一个元素前面的位置</p>
<p>逆向迭代器是一种反向遍历容器的迭代器。也就是，从最后一个元素到第一个元素遍历容器。反向迭代器将自增（和自减）的含义反过来了：对于反向迭代器，++ 运算将访问前一个元素，而 – 运算则访问下一个元素。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200908120007.png" alt="image-20200908120007266"></p>
<p>执行并观察以下程序帮助理解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">4</span>,s=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cin&gt;&gt;n;</span></span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n*n;i++) a.push_back(i);</span><br><span class="line">	sort(a.rbegin()+<span class="number">2</span>,a.rend()<span class="number">-5</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n*n;i++) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>; 	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200908115931.png" alt="image-20200908115922322"></p>
</blockquote>
</li>
<li><p>偶数列在数组中的坐标。</p>
<p>由题目可以观察得出，</p>
<p>需要排序的起始位置为之前输出的位数总和，终止位置为本行及本行以上的位数总和。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200908120506.png" alt="image-20200908120506235"></p>
<p>得出表达式（1/2）<em>n</em>(n+1)。</p>
</li>
</ol>
</blockquote>
<h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,s=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*n;i++) a.push_back(i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">2</span>==<span class="number">0</span>) sort(a.rend()<span class="number">-0.5</span>*(i+<span class="number">1</span>)*(i+<span class="number">1</span>+<span class="number">1</span>),a.rend()<span class="number">-0.5</span>*(i)*(i+<span class="number">1</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=n-i<span class="number">-1</span>;j&lt;n;j++) &#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[s++]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>LeetCode-20. 有效的括号</title>
    <url>/2020/09/09/LeetCode-20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    <content><![CDATA[<h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses/</a></p>
</blockquote>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><blockquote>
<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
</blockquote>
<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><blockquote>
<p>示例 1:</p>
<p>输入: “()”<br>输出: true<br>示例 2:</p>
<p>输入: “()[]{}”<br>输出: true<br>示例 3:</p>
<p>输入: “(]”<br>输出: false<br>示例 4:</p>
<p>输入: “([)]”<br>输出: false<br>示例 5:</p>
<p>输入: “{[]}”<br>输出: true</p>
</blockquote>
<h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路:"></a>题解思路:</h1><blockquote>
<ol>
<li>观察题目具有最近相关性，所以用栈操作。</li>
<li>首先剪枝操作，长度为奇数的一定错。第一个字符不为“（{【 ” 其中一个为错。</li>
<li>遍历字符串，当遇到左括号，入栈。遇到右括号，查看是否与栈顶元素匹配，匹配则出栈。</li>
<li>如果最后栈为空，那么它是有效的括号，反之不是。</li>
</ol>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.</span></span><br><span class="line">        <span class="comment">// stack&lt;char&gt; a;</span></span><br><span class="line">        <span class="comment">// if (s.size()%2==1) return false;</span></span><br><span class="line">        <span class="comment">// for(int i = 0;i&lt;s.size();i++) &#123;</span></span><br><span class="line">        <span class="comment">//     if(s[i] == '(' || s[i] == '[' || s[i] == '&#123;') &#123;</span></span><br><span class="line">        <span class="comment">//         a.push(s[i]);</span></span><br><span class="line">        <span class="comment">//         continue;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     if(a.empty()) return false;</span></span><br><span class="line">        <span class="comment">//     if((s[i]==')' &amp;&amp; a.top() == '(') || (s[i]==']' &amp;&amp; a.top() == '[') || (s[i]=='&#125;' &amp;&amp; a.top() == '&#123;')) &#123;</span></span><br><span class="line">        <span class="comment">//         a.pop();</span></span><br><span class="line">        <span class="comment">//     &#125;else &#123;</span></span><br><span class="line">        <span class="comment">//         break;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return a.empty();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.hash_map</span></span><br><span class="line">        <span class="comment">// if(s.size() %2 != 0) return false;</span></span><br><span class="line">        <span class="comment">// stack&lt;char&gt; a;</span></span><br><span class="line">        <span class="comment">// unordered_map&lt;char,char&gt; pair = &#123;</span></span><br><span class="line">        <span class="comment">//     &#123;')','('&#125;,</span></span><br><span class="line">        <span class="comment">//     &#123;'&#125;','&#123;'&#125;,</span></span><br><span class="line">        <span class="comment">//     &#123;']','['&#125;</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line">        <span class="comment">// for (char str : s) &#123;</span></span><br><span class="line">        <span class="comment">//     if (pair.count(str) ) &#123;</span></span><br><span class="line">        <span class="comment">//         if(a.empty() || a.top() != pair[str]) return false;</span></span><br><span class="line">        <span class="comment">//         a.pop();</span></span><br><span class="line">        <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//         a.push(str);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return a.empty();</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.switch case</span></span><br><span class="line">        <span class="comment">// if(s.size() % 2 != 0)  return false;</span></span><br><span class="line">        <span class="comment">// stack&lt;char&gt; a;</span></span><br><span class="line">        <span class="comment">// for ( char str : s )&#123;</span></span><br><span class="line">        <span class="comment">//     switch(str)&#123;</span></span><br><span class="line">        <span class="comment">//         case '(' :</span></span><br><span class="line">        <span class="comment">//         case '&#123;' :</span></span><br><span class="line">        <span class="comment">//         case '[' : a.push(str); break;</span></span><br><span class="line">        <span class="comment">//         case '&#125;' : if(a.empty() || a.top() != '&#123;') return false; a.pop(); break;</span></span><br><span class="line">        <span class="comment">//         case ']' : if(a.empty() || a.top() != '[') return false; a.pop(); break;</span></span><br><span class="line">        <span class="comment">//         case ')' : if(a.empty() || a.top() != '(') return false; a.pop(); break;</span></span><br><span class="line">        <span class="comment">//         default : ;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return a.empty();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
  </entry>
  <entry>
    <title>LeetCode-155.最小栈</title>
    <url>/2020/09/10/LeetCode-155.%E6%9C%80%E5%B0%8F%E6%A0%88/</url>
    <content><![CDATA[<h1 id="原题链接"><a href="#原题链接" class="headerlink" title="原题链接:"></a>原题链接:</h1><blockquote>
<p><a href="https://leetcode-cn.com/problems/min-stack/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/min-stack/submissions/</a></p>
</blockquote>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h1><blockquote>
<p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<p>push(x) —— 将元素 x 推入栈中。<br>pop() —— 删除栈顶的元素。<br>top() —— 获取栈顶元素。<br>getMin() —— 检索栈中的最小元素。</p>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h1><blockquote>
<p>输入：<br>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p>
<p>输出：<br>[null,null,null,null,-3,null,0,-2]</p>
</blockquote>
<h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><blockquote>
<p>解释：<br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p>
<p>提示：</p>
<p>pop、top 和 getMin 操作总是在 非空栈 上调用。</p>
</blockquote>
<h1 id="题解思路"><a href="#题解思路" class="headerlink" title="题解思路:"></a>题解思路:</h1><blockquote>
<p>题目中的要求除了检索最小值，其他方法与常规的栈相同，只需解决gitMin()方法,其余方法依旧使用栈即可。</p>
<ol>
<li>辅助栈<ol>
<li>对于栈来说，如果一个元素 a 在入栈时，栈里有其它的元素 b, c, d，那么无论这个栈在之后经历了什么操作，只要 栈顶为a时，栈中的最小值不会发生变化。</li>
<li>所以我们生成一个辅助栈，与原栈中的元素同进同出，不过进的是原栈中的最小值。</li>
</ol>
</li>
<li>pair<ol>
<li>思路与上一个一样，不过这里采用pair进行对应。</li>
</ol>
</li>
</ol>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk_min;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MinStack() &#123;</span><br><span class="line">        stk_min.push(INT_MAX);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stk.push(x);</span><br><span class="line">        x&lt;stk_min.top() ? stk_min.push(x) : stk_min.push(stk_min.top());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stk.pop();</span><br><span class="line">        stk_min.pop();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.top();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk_min.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MinStack() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ans.empty() ? ans.push(&#123;x,x&#125;) : x&lt;ans.top().second ? ans.push(&#123;x,x&#125;) : ans.push(&#123;x,ans.top().second&#125; );</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ans.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans.top().first;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ans.top().second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack* obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj-&gt;push(x);</span></span><br><span class="line"><span class="comment"> * obj-&gt;pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj-&gt;top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj-&gt;getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


</blockquote>
]]></content>
  </entry>
</search>
