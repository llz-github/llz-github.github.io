<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>windows 下安装mongodb 机器可视化工具adminMongo</title>
    <url>/2020/06/11/windows%20%E4%B8%8B%E5%AE%89%E8%A3%85mongodb%20%E6%9C%BA%E5%99%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7adminMongo/</url>
    <content><![CDATA[<h1 id="windows-下安装mongodb-机器可视化工具adminMongo"><a href="#windows-下安装mongodb-机器可视化工具adminMongo" class="headerlink" title="windows 下安装mongodb 机器可视化工具adminMongo"></a>windows 下安装mongodb 机器可视化工具adminMongo</h1><h2 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h2><h3 id="至Mongodb的-官方网站下载安装包。"><a href="#至Mongodb的-官方网站下载安装包。" class="headerlink" title="至Mongodb的 官方网站下载安装包。"></a>至Mongodb的 官方网站下载安装包。</h3><blockquote>
<p>地址<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a> ，zip,msi均可。</p>
</blockquote>
<blockquote>
<p>官网下载比较慢，可以用我分享在百度网盘上的，</p>
<p>链接：<a href="https://pan.baidu.com/s/1qsCni7Z_xV5dIBY7o3UDjg" target="_blank" rel="noopener">https://pan.baidu.com/s/1qsCni7Z_xV5dIBY7o3UDjg</a>  提取码：f2l7 ，压缩包解压密码：666666</p>
<p>zip格式和msi格式都有，截止到今日（2021.6.9）是官网发布的最新版本。</p>
</blockquote>
<h3 id="Mongodb-的安装"><a href="#Mongodb-的安装" class="headerlink" title="Mongodb 的安装"></a>Mongodb 的安装</h3><blockquote>
<p>msi安装起来很简单,一直下一步就好，可以自己选择喜欢的安装路径，新手最好安装我的路径方式来，文件存放之如下目录：F:\MongoDB\mongoDB\ 。</p>
<p>zip安装也很简单，直接将解压的包放在喜欢的位置下即可，最好也是如下目录：F:\MongoDB\mongoDB\。</p>
</blockquote>
<blockquote>
<p>接下来我们要将这个文件的 bin 目录，即：F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\bin配置在我们的 Windows 环境变量的 Path 中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200614195733.png" alt="image-20200614195527784"></p>
</blockquote>
<blockquote>
<p>配置步骤:</p>
<p>我的电脑–属性–高级系统设置–高级–环境变量–找到系统变量下的Path–加入路径即可</p>
</blockquote>
<h3 id="创建数据库文件的存放位置"><a href="#创建数据库文件的存放位置" class="headerlink" title="创建数据库文件的存放位置"></a>创建数据库文件的存放位置</h3><blockquote>
<p>在MongoDB下创建data，在data下再创建db：F:\MongoDB\data\db</p>
</blockquote>
<p>因为启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615091626.png" alt="image-20200615091626563"></p>
<h3 id="启动Mongodb-服务"><a href="#启动Mongodb-服务" class="headerlink" title="启动Mongodb 服务"></a>启动Mongodb 服务</h3><blockquote>
<p>打开 cmd ，输入mongod –dbpath F:\MongoDB\data\db即可，这个–dbpath 后的位置就是我们刚刚配置数据库的位置。</p>
</blockquote>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><blockquote>
<p>在浏览器输入<a href="http://localhost:27017" target="_blank" rel="noopener">http://localhost:27017</a> （27017是mongodb的端口号）查看，若网页</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>显示以上英文则表示启动成功啦~~</p>
</blockquote>
<h3 id="配置一下本地的-windows-mongodb-服务"><a href="#配置一下本地的-windows-mongodb-服务" class="headerlink" title="配置一下本地的 windows mongodb 服务"></a>配置一下本地的 windows mongodb 服务</h3><blockquote>
<p>这样可设置为 开机自启动，可直接手动启动关闭，可通过命令行net start MongoDB 启动。该配置会大大方便。</p>
</blockquote>
<ol>
<li><p>先在data文件下创建一个新文件夹log（用来存放日志文件）</p>
</li>
<li><p>在Mongodb bin 同等级目录下新建配置文件mongo.config,并输入以下内容：</p>
<blockquote>
<p>dbpath=F:\MongoDB\data\db<br>logpath=F:\MongoDB\data\log\mongodb.log</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092031.png" alt="image-20200614200342044"></p>
</li>
<li><p>以管理员身份打开cmd,运行以下命令：</p>
<blockquote>
<p>mongod –config F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\mongo.config –install –serviceName “MongoDB”</p>
<p>F:\MongoDB\mongoDB\mongodb-win32-x86_64-2012plus-4.2.7\mongo.config  是你的路径名。</p>
</blockquote>
</li>
<li><p>完成后查看本地服务，发现MongoDB已启动。</p>
</li>
</ol>
<p>至此Mongodb的安装及配置已圆满完成。</p>
<h1 id="安装adminMongo"><a href="#安装adminMongo" class="headerlink" title="安装adminMongo"></a>安装adminMongo</h1><h3 id="git环境搭建"><a href="#git环境搭建" class="headerlink" title="git环境搭建"></a>git环境搭建</h3><blockquote>
<p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br> 安装完成后，找到安装git的目录下的git-bash.exe,打开，进行配置：</p>
<p>配置环境变量：在path环境变量中新增git安装路径下的bin文件夹路径</p>
</blockquote>
<h3 id="node-js环境搭建"><a href="#node-js环境搭建" class="headerlink" title="node.js环境搭建"></a>node.js环境搭建</h3><blockquote>
<p>下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p>
<p>安装完成后，打开<code>cmd</code>，输入 <code>node -v</code>，检查是否显示版本信息，如果显示即安装成功。</p>
<p>打开cmd，输入npm -v校验npm工具是否安装成功，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西.</p>
<p>npm安装成功，在安装目录下新建node_cache，并使用cmd命令指定这个变量：</p>
<blockquote>
<p>npm config set cache “D:\Develop\nodejs\node_cache”</p>
</blockquote>
</blockquote>
<h3 id="adminMongo下载安装"><a href="#adminMongo下载安装" class="headerlink" title="adminMongo下载安装"></a>adminMongo下载安装</h3><blockquote>
<ol>
<li>git下将adminMongo源码从github上clone下来：</li>
</ol>
<p>git clone <a href="https://github.com/mrvautin/adminMongo.git" target="_blank" rel="noopener">https://github.com/mrvautin/adminMongo.git</a></p>
<ol start="2">
<li>进入adminMongo路径：</li>
</ol>
<p>cd adminMongo</p>
<ol start="3">
<li>安装依赖：</li>
</ol>
<p>npm install</p>
<ol start="4">
<li>启动应用：</li>
</ol>
<p>npm start </p>
</blockquote>
<h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p>输入 <a href="http://127.0.0.1:1234" target="_blank" rel="noopener">http://127.0.0.1:1234</a> 就会弹出adminMongo 的界面啦</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092059.png" alt="image-20200614200653014"></p>
<h3 id="添加mongodb到adminMongo"><a href="#添加mongodb到adminMongo" class="headerlink" title="添加mongodb到adminMongo"></a>添加mongodb到adminMongo</h3><p> 分别填入：<br> Connection name： local<br> Connection string： <a href="mongodb://localhost:27017">mongodb://localhost:27017</a><br> 点击 <code>Add Connection</code>按钮即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200615092209.png" alt="image-20200614200745468"></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown 语法入门</title>
    <url>/2020/05/23/Markdown%20%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。本文是以实现日常书写个人博客所需而编写。语法超级简单，几分钟掌握Markdown语法。</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用 # 号标记标题（1~6级）</p>
<blockquote>
<p># 一级标题</p>
<p>## 二级标题</p>
<p>……..</p>
<p>###### 六级标题</p>
</blockquote>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落的换行是使用两个以上的空格加上回车  </p>
<p>或者使用空行来换行</p>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><blockquote>
<p>*斜体文本*</p>
<p>_斜体文本_</p>
<p>**粗体文本**</p>
<p>__粗体文本__</p>
<p>***粗斜体文本***</p>
<p>___粗斜体文本___</p>
</blockquote>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>可采用下述几种方法创建分割线</p>
<blockquote>
<p>***</p>
<p>*****</p>
<p>------</p>
<p>----------------</p>
</blockquote>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><blockquote>
<p>文字两端添加双波浪线</p>
<p>示例:</p>
<p>~~ABC~~</p>
<p>效果:</p>
<p><del>ABC</del></p>
</blockquote>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><blockquote>
<p>下划线可以通过HTML的&lt;u&gt;标签来实现</p>
<p>示例:</p>
<p>&lt;u&gt;下划线文字&lt;/u&gt;</p>
<p>效果:</p>
<p><u>下划线文字</u></p>
</blockquote>
<h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><blockquote>
<p>示例:</p>
<p>脚注是对文本的补充说明，格式为[^文字]</p>
<p>效果:</p>
<p>脚注是对文本的补充说明，格式为[^脚注文字]</p>
</blockquote>
<p>[^脚注文字]: yeah, it’s me#</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><blockquote>
<p>无序列表采用星号（*）、加号（+）、或是减号（-）作为列表标记</p>
<p>示例:</p>
<p>* 第一</p>
<p>+ 第二</p>
<p>- 第三</p>
<p>效果如下：</p>
<ul>
<li>第一</li>
</ul>
<ul>
<li>第二</li>
</ul>
<ul>
<li>第三</li>
</ul>
</blockquote>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><blockquote>
<p>有序列表使用数字加上 . 来表示</p>
<p>示例:</p>
<p>1.  第一</p>
<p>2. 第二</p>
<p>3. 第三</p>
<p>效果：</p>
<ol>
<li>第一</li>
<li>第二</li>
<li>第三</li>
</ol>
</blockquote>
<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><blockquote>
<p>列表的嵌套，只需在子列表中的选项添加tab键即可</p>
<p>示例：</p>
<p>1. 第一项：</p>
<p>​    第一项嵌套的</p>
<p>2. 第二项：</p>
<p>​    第二项嵌套的</p>
<p>效果：</p>
<ol>
<li>第一项：<ol>
<li>第一项嵌套的</li>
</ol>
</li>
<li>第二项：<ol>
<li>第二项嵌套的</li>
</ol>
</li>
</ol>
</blockquote>
<h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><blockquote>
<p> 区块是段落开头的使用的 &gt; 号，后面紧跟着一个空格</p>
<p> 示例：</p>
<p> &gt; 区块的引用</p>
<p> &gt; 我是区块</p>
<p> 效果：</p>
<blockquote>
<p>区块的引用</p>
<p>我是区块</p>
</blockquote>
</blockquote>
<blockquote>
<p>区块之间也是可以嵌套的</p>
<p>示例：</p>
<p>&gt; 第一层</p>
<p>&gt; &gt; 第二层</p>
<p>&gt; &gt; &gt; 第三层</p>
<p>效果：</p>
<blockquote>
<p>第一层</p>
<blockquote>
<p>第二层</p>
<blockquote>
<p>第三层</p>
</blockquote>
</blockquote>
</blockquote>
<p>注：列表中放入区块需在 &gt; 前输入tab键</p>
</blockquote>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote>
<p>如果是一个函数或片段的代码可以使用反引号包裹起来</p>
<p>示例：</p>
<p>`printf()` </p>
<p>效果：</p>
<p><code>printf()</code></p>
</blockquote>
<blockquote>
<p>代码区块使用三个反引号包裹</p>
<p>示例:</p>
<p>```int main(){</p>
<p>​    int i = 0;    </p>
<p>​    return 0;</p>
<p>}```</p>
<p>效果:</p>
<figure class="highlight plain"><figcaption><span>main()&#123;</span></figcaption><table><tr><td class="code"><pre><span class="line">int i&#x3D;0;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><blockquote>
<p>链接的使用方法</p>
</blockquote>
<p>1.[]后跟()</p>
<blockquote>
<p>示例:</p>
<p>[我的github](<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a>)</p>
<p>效果:</p>
<p><a href="https://github.com/llz-github" target="_blank" rel="noopener">我的github</a></p>
</blockquote>
<p>2.直接使用&lt;&gt;</p>
<blockquote>
<p>示例:</p>
<p>&lt;<a href="https://github.com/llz-github&gt;" target="_blank" rel="noopener">https://github.com/llz-github&gt;</a></p>
<p>效果:</p>
<p><a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
</blockquote>
<p>3.通过变量设置连接</p>
<blockquote>
<p>示例:</p>
<p>这里使用1作为网址连接我的[github][1]</p>
<p>这里使用2作为网址连接我的[github][2]</p>
<p>[1]:<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
<p>[2]:<a href="https://github.com/llz-github" target="_blank" rel="noopener">https://github.com/llz-github</a></p>
<p>效果:</p>
<p>这里使用1作为网址连接我的<a href="https://github.com/llz-github" target="_blank" rel="noopener">github</a></p>
<p>这里使用2作为网址连接我的<a href="https://github.com/llz-github" target="_blank" rel="noopener">github</a></p>
</blockquote>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><blockquote>
<p>图片语法格式 ![图片的替代文字](图片地址)</p>
<p>示例:</p>
<p>![](<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">https://images5.alphacoders.com/532/532559.jpg</a>)</p>
<p>效果:</p>
<p><img src="https://images5.alphacoders.com/532/532559.jpg" alt=""></p>
</blockquote>
<blockquote>
<p>我们也可以像对网址那样对待图片</p>
<p>示例:</p>
<p>这是一个[图片][3]</p>
<p>[3]:<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">https://images5.alphacoders.com/532/532559.jpg</a></p>
<p>效果:</p>
<p>这是一个<a href="https://images5.alphacoders.com/532/532559.jpg" target="_blank" rel="noopener">图片</a></p>
</blockquote>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote>
<p>示例:</p>
<p>| 姓名| 性别| 学号</p>
<p>| - | - | -</p>
<p>| lz | 男 | 01</p>
<p>| zl | 男 | 02</p>
<p>| ly | 女 | 03</p>
<p>效果 :</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>学号</th>
</tr>
</thead>
<tbody><tr>
<td>lz</td>
<td>男</td>
<td>01</td>
</tr>
<tr>
<td>zl</td>
<td>男</td>
<td>02</td>
</tr>
<tr>
<td>ly</td>
<td>女</td>
<td>03</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>接下来再给大家介绍一下快捷键的应用,</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>语法</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>标题</td>
<td>用#号表示，#一级标题，##表示二级标题，依次类推</td>
<td>Ctrl+1、2、3、4</td>
</tr>
<tr>
<td>字体加粗</td>
<td>左右用**包裹起来</td>
<td>Ctrl+B</td>
</tr>
<tr>
<td>斜体字</td>
<td>左右用*包裹起来</td>
<td>Ctrl+I</td>
</tr>
<tr>
<td>加粗斜体</td>
<td>左右用**包裹起来</td>
<td>Ctrl+B,Ctrl+I</td>
</tr>
<tr>
<td>&gt;区块</td>
<td>在文字开头添加&gt;表示区块说明</td>
<td>Ctrl+Q</td>
</tr>
<tr>
<td>代码块</td>
<td>通过或者4个空格缩进表示</td>
<td>Ctrl+K</td>
</tr>
<tr>
<td>无序列表</td>
<td>文字前加上 - 或 * 即可变为无序列表</td>
<td>Ctrl+U</td>
</tr>
<tr>
<td>有序列表</td>
<td>直接在文字前加1. 2.符号要和文字之间加上一个字符的空格表示</td>
<td>Ctrl+O</td>
</tr>
<tr>
<td>链接</td>
<td>通过<a href="www.baidu.com">百度</a>写法表示超链接</td>
<td>Ctrl+L</td>
</tr>
<tr>
<td>图片</td>
<td>在光标所在行插入图片</td>
<td>Ctrl+G</td>
</tr>
<tr>
<td>时间戳</td>
<td></td>
<td>Ctrl+T</td>
</tr>
</tbody></table>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h2><blockquote>
<p>HTML中的元素例如&lt;br&gt;等都可以在文档中实现</p>
<p>示例：</p>
<p>&lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;Atl&lt;/kbd&gt; + &lt;kbd&gt;z&lt;/kbd&gt;调出QQ </p>
<p>效果：</p>
<p>ctrl + Alt + z调出QQ</p>
</blockquote>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><blockquote>
<p>当你需要输入一些特殊字符时,例如:* [] (),我们就需要用到转义字符 \ </p>
<p>在需要的符号前输入 \ ,则保持原符号.</p>
<p>示例:</p>
<p>\_我应该是斜体文本\_</p>
<p>效果:》</p>
<p>_我应该是斜体文本斜体文本_</p>
</blockquote>
<p>以上便是 Markdown 中常用到的语法，在此留下足迹以备用。</p>
]]></content>
  </entry>
  <entry>
    <title>python爬虫设置随机ip和User-Agent</title>
    <url>/2020/06/13/python%E7%88%AC%E8%99%AB%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BAip%E5%92%8CUser-Agent/</url>
    <content><![CDATA[<p>在python 数据爬取的时候，有些网站不会同意我们直接用爬虫访问爬取，如果识别是一个爬虫在访问，那么站点根本不会响应。不仅如此，当服务器觉得一个频繁的请求是来自于同一个IP地址发出的，服务器也会对IP进行限制访问。</p>
<blockquote>
<p>针对以上问题，我们也有相应的方法应对：</p>
</blockquote>
<p>1.对于服务器的爬虫识别问题，我们可以利用User-Agent标识将爬虫伪装成用户请求。</p>
<p>2.对于限制ip 的问题，我们可以使用代理ip ，随机切换IP地址，不使用真实的IP来发起请求。</p>
<blockquote>
<p>获取随机ip 和User-Agent 的文件 random_ip_and_header.py</p>
</blockquote>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">get_xici_ip</span><span class="params">()</span>:</span></span><br><span class="line"> <span class="comment"># 尝试代理agents增强反反爬</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">random_agent</span><span class="params">(self)</span>:</span></span><br><span class="line">     user_agents = [</span><br><span class="line">         <span class="string">"Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_2 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"</span>,</span><br><span class="line">         <span class="string">"MQQBrowser/25 (Linux; U; 2.3.3; zh-cn; HTC Desire S Build/GRI40;480*800)"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (Linux; U; Android 2.3.3; zh-cn; HTC_DesireS_S510e Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"</span>,</span><br><span class="line">         <span class="string">"Mozilla/5.0 (SymbianOS/9.3; U; Series60/3.2 NokiaE75-1 /110.48.125 Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/413 (KHTML, like Gecko) Safari/413"</span></span><br><span class="line">         <span class="string">'Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1'</span>,</span><br><span class="line">         <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,</span><br><span class="line">         <span class="string">'Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11'</span></span><br><span class="line">         ]</span><br><span class="line">     <span class="keyword">return</span> random.choice(user_agents)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 尝试代理IP增强反反爬</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_ip_list</span><span class="params">(self, url, headers)</span>:</span></span><br><span class="line">     web_data = requests.get(url, headers=headers)</span><br><span class="line">     soup = BeautifulSoup(web_data.text, <span class="string">'lxml'</span>)</span><br><span class="line">     ips = soup.find_all(<span class="string">'tr'</span>)</span><br><span class="line">     ip_list = []</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(ips)):</span><br><span class="line">         ip_info = ips[i]</span><br><span class="line">         tds = ip_info.find_all(<span class="string">'td'</span>)</span><br><span class="line">         ip_list.append(tds[<span class="number">1</span>].text + <span class="string">':'</span> + tds[<span class="number">2</span>].text)</span><br><span class="line">     <span class="keyword">return</span> ip_list</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_random_ip</span><span class="params">(self, ip_list)</span>:</span></span><br><span class="line">     proxy_list = []</span><br><span class="line">     <span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">         proxy_list.append(<span class="string">'http://'</span> + ip)</span><br><span class="line">     proxy_ip = random.choice(proxy_list)</span><br><span class="line">     proxies = &#123;<span class="string">'http'</span>: proxy_ip&#125;</span><br><span class="line">     <span class="keyword">return</span> proxies</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">     url = <span class="string">'http://www.xicidaili.com/nn/%s'</span>%random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">     headers = &#123;</span><br><span class="line">         <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36'</span></span><br><span class="line">     &#125;</span><br><span class="line">     ip_list = self.get_ip_list(url, headers=headers)</span><br><span class="line">     print(ip_list)</span><br><span class="line">     <span class="keyword">return</span> self.get_random_ip(ip_list)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(get_xici_ip().random_agent())</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br><span class="line">    print(get_xici_ip().get_one())</span><br></pre></td></tr></table></figure>

<p>本文件可直接使用获取，也可供其他文件调用实现随机 ip 和 header 访问。</p>
<p>在爬虫文件中设置以下配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random_ip_and_header <span class="keyword">import</span> get_xici_ip</span><br><span class="line"></span><br><span class="line">User_Agent = get_xici_ip().random_agent()</span><br><span class="line">proxy = get_xici_ip().get_one()</span><br><span class="line">header = &#123;</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'en'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: User_Agent</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>并为请求访问设置指定headers 和proxies 便可进行匿名访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(url,headers=header,proxies=proxy)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如此设置便可大大提高数据爬取速度，但是要记得，数据爬取会给服务器带来很大的压力，我们也要设置好爬取时间间隔，最好是在夜深人静的时候进行爬取，避免给服务器造成困扰哦。</p>
]]></content>
  </entry>
  <entry>
    <title>递归实现指数型枚举</title>
    <url>/2020/08/15/%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8C%87%E6%95%B0%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p>从 1~n 这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个整数n。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每行输出一种方案。</p>
<p>同一行内的数必须升序排列，相邻两个数用恰好1个空格隔开。</p>
<p>对于没有选任何数的方案，输出空行。</p>
<p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤15</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">2 3</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure>

<p><strong>题解:</strong></p>
<blockquote>
<p>暴力枚举</p>
<p>整体思路是准备出一个数组，将每个位置都遍历一次，选中的置为1，未重的置为-1，最后将其输出即可。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断何时选取到了规定的数目,并将符合条件的输出</span></span><br><span class="line">    <span class="keyword">if</span>(a&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(b[i] == <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//递归选择,选中的置为1,未选中的置为-1,还未操作的置为0</span></span><br><span class="line">    b[a] = <span class="number">1</span>;</span><br><span class="line">    dfs(a+<span class="number">1</span>);</span><br><span class="line">    b[a] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    b[a] = <span class="number">-1</span>;</span><br><span class="line">    dfs(a+<span class="number">1</span>);</span><br><span class="line">    b[a] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>递归实现排列型枚举</title>
    <url>/2020/08/16/%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%88%97%E5%9E%8B%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p>把 1~nn 这 nn 个整数排成一行后随机打乱顺序，输出所有可能的次序。</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>一个整数n。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行1个。</p>
<p>首先，同一行相邻两个数用一个空格隔开。</p>
<p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤91≤n≤9</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>题解思路:</strong></p>
<p>暴力枚举每个位置上的所有数字的可能，前面位置已经时用过的数字不能重复使用，定义used数组来判断是否使用过该数字，满足条件后输出。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b[N],n;</span><br><span class="line"><span class="keyword">bool</span> used[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!used[i])&#123;</span><br><span class="line">            used[i]=<span class="literal">true</span>;</span><br><span class="line">            b[t]=i;</span><br><span class="line">            dfs(t+<span class="number">1</span>);</span><br><span class="line">            b[t]=<span class="number">0</span>;</span><br><span class="line">            used[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Java大学生特训营 疫情地图项目实战课</title>
    <url>/2020/08/17/Java%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%89%B9%E8%AE%AD%E8%90%A5%20%E7%96%AB%E6%83%85%E5%9C%B0%E5%9B%BE%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="疫情地图的绘制及线上部署"><a href="#疫情地图的绘制及线上部署" class="headerlink" title="疫情地图的绘制及线上部署"></a>疫情地图的绘制及线上部署</h1><ol>
<li><p><strong>阿里云服务器的搭建</strong></p>
<blockquote>
<p>首先打开浏览器输入<a href="https://www.aliyun.com/进入阿里云官网，本次购买的是阿里云目前云服务器使用量最高的云服务器ECS，" target="_blank" rel="noopener">https://www.aliyun.com/进入阿里云官网，本次购买的是阿里云目前云服务器使用量最高的云服务器ECS，</a></p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215439.png" alt="image-20200817214834520"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215423.png" alt="image-20200817215423707"></p>
<p><strong>1. 基础配置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215931.png" alt="image-20200817215931336"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817221938.jpg" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817221840.jpg" alt="img"></p>
<p><img src="F:%5CQQ%E7%BC%93%E5%AD%98%5C%E4%B8%AA%E4%BA%BA%E6%96%87%E4%BB%B6%5C2045949224%5CImage%5CGroup2%5CII%5CMO%5CIIMOKAZ_(NZ2N%5B)4M5L%60SQM.jpg" alt="img"></p>
<p><strong>2. 网络和安全组</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817223833.png" alt="image-20200817223833690"></p>
<p><strong>3. 系统配置</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817224339.png" alt="image-20200817224029213"></p>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817224328.png" alt="image-20200817224328633"></p>
<p>至此便完成了服务器的购买。</p>
<p>接下来我们继续对服务器进行配置：</p>
</li>
</ol>
<ol start="2">
<li><p><strong>微信公众号的申请</strong></p>
</li>
<li><p><strong>编码实现</strong></p>
</li>
<li><p><strong>世界疫情地图部署上线</strong></p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/llz-github/image/img1/20200817215455.png" alt="image-20200817213747943"></p>
]]></content>
  </entry>
</search>
